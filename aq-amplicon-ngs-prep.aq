{"config":{"title":"Aquarium Amplicon NGS Prep","description":"A workflow that preps yeast libraries for NGS using qPCR","copyright":"University of Washington","version":"0.0.1","authors":[{"name":"Devin Strickland","affiliation":"University of Washington"}],"maintainer":{"name":"Devin Strickland","email":"dvn.strcklnd@gmail.com"},"acknowledgements":null,"github":{"user":"dvnstrcklnd","repo":"aq-amplicon-ngs-prep"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"library":{"name":"DNAGel","category":"Collection Models","code_source":"needs \"Tissue Culture Libs/CollectionDisplay\"\n\nclass DNAGel\n\n    include CollectionDisplay\n\n    GENERIC_GEL = \"50 mL Agarose Gel in Gel Box\"\n    AGAROSE = \"Agarose Gel\" # Sample type in unused lanes\n    AGAROSE_ID = Sample.find_by_name(AGAROSE).id\n\n    attr_reader :gel, :percentage, :agarose_type, :rows, :columns\n    attr_accessor :operation_matrix, :ladders\n\n    # Initializes a {DNAGel} for the given gel {Collection}.\n    #\n    # @requires gel is a {Collection}\n    # @requires gel {Collection} has associations `:percentage` and `:type`\n    # @param gel [Collection]\n    def initialize(gel:)\n        @gel = gel\n        @percentage = gel.get(\"percentage\")\n        @agarose_type = gel.get(\"type\")\n        @columns = gel.object_type.columns\n        @rows = gel.object_type.rows\n        @operation_matrix = Array.new(rows) { Array.new(columns) }\n        @ladders = []\n    end\n\n    # Adds ladder {Sample}s to the gel layout as represented by the {Collection}'s\n    #   {Sample} matrix. Adds one of each {Sample} to each gel `row`.\n    #\n    # @todo Make it so that you can pass a parameter to also add ladders on the other\n    #   side of the gel.\n    # @param samples [Array\u003cSample\u003e] the ladder Samples to be added\n    def add_ladders(samples:)\n        rows.times do |r|\n            samples.each_with_index do |sample, c|\n                gel.set(r, c, sample.id)\n                ladders \u003c\u003c sample\n            end\n        end\n    end\n\n    # Adds {Operation}s to the gel layout until it is filled and returns the remainder.\n    #\n    # @note Makes a new {Part} for each {Operation} that is added.\n    # @note Adds the {Operation} to `operation_matrix` in the same `r, c` as the {Part}.\n    # @param operations [Array\u003cOperation\u003e] {Operation}s to be added\n    # @param output_handle [String] the name of the output {FieldValue}\n    # @return [Array\u003cOperation\u003e] {Operation}s that didn't get added because there\n    #   wasn't sufficient room in the collection\n    def add_operations(operations:, output_handle:)\n        empties = get_empty\n        empties.each do |r, c|\n            if operations.any?\n                op = operations.shift\n                op.output(output_handle).make_part(gel, r, c)\n                operation_matrix[r][c] = op\n            else\n                gel.set(r, c, Collection::EMPTY)\n            end\n        end\n        operations\n    end\n\n    # Uses {Collection#select} to find empty lanes that haven't already been assigned a\n    #   sample or ladder.\n    #\n    # @return [Array\u003cArray\u003cFixnum\u003e\u003e] empty lane indices in the form [[r1, c1], [r2, c2]]\n    def get_empty\n        gel.select { |x| x == Collection::EMPTY || x == AGAROSE_ID }\n    end\n\n    # The total number of lanes.\n    #\n    # @return [FixNum] `gel.rows` * `gel.columns`\n    def size\n        rows * columns\n    end\n\n    # The number of ladders being added to each row of the gel.\n    #\n    # @return [FixNum]\n    def ladders_per_row\n        ladders.length\n    end\n\n    # The number of lanes in each row of the gel that don't have ladders.\n    #\n    # @return [FixNum]\n    def free_lanes_per_row\n        columns - ladders_per_row\n    end\n\n    # Mark 'gel` {Collection} as deleted in the inventory\n    #\n    def mark_as_deleted\n        gel.mark_as_deleted\n    end\n\n    # Tests whether 'gel` {Collection} is deleted in the inventory\n    #\n    def deleted?\n        gel.deleted?\n    end\n\n    # Finds all the available {DNAGel::GENERIC_GEL} {Item}s in inventory.\n    #\n    # @return [ActiveRecord::Relation\u003cCollection\u003e]\n    def self.gels_in_inventory\n        ot = ObjectType.find_by_name(GENERIC_GEL)\n        Collection.where(object_type_id: ot.id).reject { |gel| gel.deleted? }\n    end\n\n    # Finds all the available {DNAGel::GENERIC_GEL} {Item}s in inventory of the desired\n    #   `:type` and `:percentage`.\n    #\n    # @param agarose_type [String]\n    # @param percentage [String]\n    # @return [ActiveRecord::Relation\u003cCollection\u003e]\n    def self.matching_gels(agarose_type:, percentage:)\n        DNAGel.gels_in_inventory.select do |gel|\n            gel.get(\"type\") == agarose_type \u0026\u0026\n            gel.get(\"percentage\") == percentage\n        end\n    end\n\n    # Creates a display table mapping the input {Item}s to the {DNAGel}'s\n    #   lanes.\n    #\n    # @param input_handle [String] the name of the input {FieldValue}\n    # @return [Array\u003cArray\u003cString\u003e\u003e] the mapping formatted as a {Table}\n    def sample_display(input_handle:)\n        rcx_list = []\n        operation_matrix.each_with_index do |row, outrow|\n            row.each_with_index do |op, outcol|\n                next unless op\n                fv = op.input(input_handle)\n                x = \"#{fv.child_item_id}\u003cbr\u003e#{alphanumeric(fv.row, fv.column)}\"\n                rcx_list \u003c\u003c [outrow, outcol, x]\n            end\n        end\n        highlight_alpha_rcx(gel, rcx_list)\n    end\n\n    # Creates a display table mapping the `ladders` to the {DNAGel}'s\n    #   lanes.\n    #\n    # @return [Array\u003cArray\u003cString\u003e\u003e] the mapping formatted as a {Table}\n    def ladder_display\n        rcx_list = []\n        ladders.each do |sample|\n            gel.find(sample).each { |r, c| rcx_list \u003c\u003c [r, c, sample.name] }\n        end\n        highlight_alpha_rcx(gel, rcx_list)\n    end\n\n    # Converts zero-indexed `row` and `column` to alphanumeric plate indices.\n    #\n    # @param row [FixNum]\n    # @peram column [FixNum]\n    def alphanumeric(row, column)\n        alpha_r = ('A'..'H').to_a\n        \"#{alpha_r[row]}#{column + 1}\"\n    end\n\nend"}},{"library":{"name":"PurificationHelper","category":"Library Cloning","code_source":"# SG\n# code adapted from Cloning/Purify Gel Slice\n# helper functions for purification of a fragment from either gel slice or liquid-based reactions (e.g., PCR, restriction)\n#\n# careful when editing! used by the following Protocols:\n# Purify on Column\n# Purify Gel Slice\n# Purify High-Volume Gel\nmodule PurificationHelper\n\n    # TODO refactor density parameter name? (see qg_volumes and iso_volumes definitions)\n    DENSITY1 = 1.0 / 3000.0\n    DENSITY2 = 1.0 / 1000.0\n    MAX_VOL = 750 # uL, max volume to load on 1.5 eppi\n    TEMP_BLOCK = \"H2\" # whick block to use\n    TEMP_BLOCK_T = 40 # C\n\n    # common to both kits - appear separately in settings, but can be changed here for both\n    SPIN_G=17 # g\n    SPIN_TIME_MIN=1 # min\n    ELUTION_TEMP_C=50 # degrees\n    ELUTION_VOL=30 # uL\n    ELUTION_TIME_MIN=5 # min\n    FIRST_RINSE_VOL = 750 # uL\n    SECOND_RINSE_VOL = 500 # uL\n    LOAD_TIME = 1 # min\n\n    # allowed kits and their settings\n    QIAGEN_SETTINGS={\"column\" =\u003e \"blue Qiagen column\", \"loadingBuffer\"=\u003e \"Qiagen QG buffer\", \"washBuffer\" =\u003e \"Qiagen PE buffer\", \"elutionBuffer\" =\u003e \"Qiagen EB buffer\", \"elutionTemperature\" =\u003e 50, \"elutionVolume\" =\u003e ELUTION_VOL, \"spinG\" =\u003e SPIN_G, \"spinTime\" =\u003e SPIN_TIME_MIN, \"elutionTime\" =\u003e ELUTION_TIME_MIN, \"meltTime\" =\u003e 10, \"meltTemperature\" =\u003e 50, \"firstRinseVol\" =\u003e FIRST_RINSE_VOL, \"secondRinseVol\" =\u003e SECOND_RINSE_VOL, \"loadingTime\" =\u003e LOAD_TIME}\n    QIAGENPINK_SETTINGS={\"column\" =\u003e \"pink Qiagen column\", \"loadingBuffer\"=\u003e \"Qiagen QG buffer\", \"washBuffer\" =\u003e \"Qiagen PE buffer\", \"elutionBuffer\" =\u003e \"Qiagen EB buffer\", \"elutionTemperature\" =\u003e 50, \"elutionVolume\" =\u003e ELUTION_VOL, \"spinG\" =\u003e SPIN_G, \"spinTime\" =\u003e SPIN_TIME_MIN, \"elutionTime\" =\u003e ELUTION_TIME_MIN, \"meltTime\" =\u003e 10, \"meltTemperature\" =\u003e 50, \"firstRinseVol\" =\u003e FIRST_RINSE_VOL, \"secondRinseVol\" =\u003e SECOND_RINSE_VOL, \"loadingTime\" =\u003e LOAD_TIME}\n    PROMEGA_SETTINGS={\"column\" =\u003e \"Promega column\", \"loadingBuffer\"=\u003e \"Membrane Binding Solution\", \"washBuffer\" =\u003e \"Membrane Wash Solution\", \"elutionBuffer\" =\u003e \"molecular grade water\", \"elutionTemperature\" =\u003e 50, \"elutionVolume\" =\u003e ELUTION_VOL, \"spinG\" =\u003e SPIN_G, \"spinTime\" =\u003e SPIN_TIME_MIN, \"elutionTime\" =\u003e ELUTION_TIME_MIN, \"meltTime\" =\u003e 5, \"meltTemperature\" =\u003e 50, \"firstRinseVol\" =\u003e FIRST_RINSE_VOL, \"secondRinseVol\" =\u003e SECOND_RINSE_VOL, \"loadingTime\" =\u003e LOAD_TIME}\n    KIT_SETTINGS={\"Qiagen\"=\u003eQIAGEN_SETTINGS,\"QiagenPink\"=\u003eQIAGENPINK_SETTINGS,\"Promega\"=\u003ePROMEGA_SETTINGS}\n\n\n    #---------------------------------------------------------------------\n    # load sample on column\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def findSettings(kitStr)\n        kit=KIT_SETTINGS.fetch(kitStr)\n        if(kit.nil?)\n            show do\n                title \"Problem!\"\n                note \"Purification kit #{kitStr} not recognized, exiting.\"\n                return\n            end\n        end\n        # return settings\n        kit\n    end # def\n\n    #---------------------------------------------------------------------\n    # heat elution buffer\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def heatElutionBuffer(ioStr, kitStr)\n\n        kit=findSettings(kitStr)\n\n        tot_reactions = 0\n        operations.each { |op|\n            if(op.input(ioStr).object_type.name==\"Multiple Gel Slices\")\n                tot_reactions = tot_reactions + op.input(ioStr).item.get(:number_of_tubes).to_f\n            else\n                tot_reactions = tot_reactions + 1\n            end\n        }\n\n        show do\n            title \"Preheat elution buffer\"\n            # math: 1.5 so there is spare, 2 because we may split into 2 tubes\n            check \"Set temperature block #{TEMP_BLOCK} to #{kit.fetch(\"elutionTemperature\")} C\"\n            check \"In a 1.5 mL tube, heat #{1.5*2*tot_reactions*kit.fetch(\"elutionVolume\")} µL of #{kit.fetch(\"elutionBuffer\")} to #{kit.fetch(\"elutionTemperature\")} C on temperature block #{TEMP_BLOCK}\"\n            note \"The heated #{kit.fetch(\"elutionBuffer\")} will be used in the final step of the purification\"\n        end\n\n    end #def\n\n    #---------------------------------------------------------------------\n    # calculate volumes needed throughout protocol based on weight\n    # CAREFUL! ioStr may refer to either parts (of stripwells), multiple gel slices, or non-part items\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def volumeSetup(ioStr, kitStr)\n\n        # for testing - assign a random weight value\n        if(debug)\n            operations.each { |op| op.temporary[:weight] = (Random.rand(0.25) + 0.1).to_s }\n        end\n\n        # if already have weights defined, assign them to temporary for use further on\n        ops_with_weight=operations.select { |op| !(op.input(ioStr).item.get(:weight).nil?) }.each { |opw| opw.temporary[:weight]=opw.input(ioStr).item.get(:weight) }\n\n        # get weights of samples if not already defined\n        # Stripwell\n        stripwell_ops=operations.select { |op| op.temporary[:weight].nil? \u0026\u0026 op.input(ioStr).object_type.name==\"Stripwell\" }\n        if(stripwell_ops.any?)\n            show do\n                title \"Enter volume(s) of stripwell wells\"\n                note \"Enter the volumes of the wells:\"\n                table stripwell_ops.start_table\n                    .input_item(ioStr) # may be a collection id\n                    .custom_column(heading: \"well\") { |op| op.input(ioStr).column + 1 } # well within collection\n                    .get(:weight, type: 'number', heading: \"Volume (µL)\", default: 50.0)\n                    .end_table\n            end\n            stripwell_ops.each { |op|\n                op.temporary[:weight] = \"#{(op.temporary[:weight].to_f)/1000.0}\"\n            }\n        end\n        # Multiple Gel Slice\n        multiple_ops=operations.select { |op| op.temporary[:weight].nil? \u0026\u0026 op.input(ioStr).object_type.name==\"Multiple Gel Slices\" }\n        if(multiple_ops.any?)\n            show do\n                title \"Weigh volume(s) of 'multiple gel' items\"\n                note \"Weigh the tubes and and enter the maximum weight of the following samples:\"\n                table multiple_ops.start_table\n                    .input_item(ioStr)\n                    .custom_column(heading: \"number of tubes\") { |op| op.input(ioStr).item.get(:number_of_tubes) }\n                    .get(:weight, type: 'number', heading: \"MAXIMAL weight over ALL tubes (g)\", default: 0.001)\n                    .end_table\n                note \"Write the MAXIMAL weight for each 'multiple gel' item on tube labeled \u003cb\u003e1\u003c/b\u003e\"\n            end\n        end\n        # non-collection, non-multiple items\n        other_ops=operations.select { |op| op.temporary[:weight].nil? \u0026\u0026 !(op.input(ioStr).object_type.name==\"Stripwell\") \u0026\u0026 !(op.input(ioStr).object_type.name==\"Multiple Gel Slices\") }\n        if(other_ops.any?)\n            show do\n                title \"Weigh volume(s) of non-stripwell items\"\n                note \"Weigh the tubes and and enter the volume of the following samples:\"\n                table other_ops.start_table\n                    .input_item(ioStr) # may be a collection id\n                    .get(:weight, type: 'number', heading: \"Weight (g)\", default: 0)\n                    .end_table\n                note \"Write the tube weight on the side of each tube\"\n            end\n        end\n\n        # calculate volumes of buffers\n        kit=findSettings(kitStr) # test for bad string\n        if(kitStr==\"Qiagen\" || kitStr=='QiagenPink')\n            operations.each do |op|\n                op.temporary[:qg_volume]  = (op.temporary[:weight].to_f / DENSITY1).floor\n                if add_isopropanol?(op, ioStr)\n                    op.temporary[:iso_volume] =  (op.temporary[:weight].to_f / DENSITY2).floor\n                else\n                    op.temporary[:iso_volume] = 0\n                end\n                op.temporary[:total_volume] = op.temporary[:qg_volume] + op.temporary[:iso_volume]\n            end\n        elsif(kitStr==\"Promega\")\n            operations.each do |op|\n                op.temporary[:qg_volume]  = (1000*(op.temporary[:weight].to_f)).ceil\n                op.temporary[:iso_volume] = 0 # isopropanol volume == 0 for Promega kit\n                op.temporary[:total_volume] = op.temporary[:qg_volume]\n            end\n        end\n\n        # these will need to be split\n        operations.each do |op|\n            op.temporary[:is_divided] = (op.temporary[:total_volume] \u003e= 2000)\n        end\n\n    end # def\n\n    def add_isopropanol?(op, ioStr)\n        length = op.input(ioStr).sample.properties[\"Length\"]\n        return true unless length.is_a?(Numeric)\n        length \u003c= 500 || length \u003e= 4000\n    end\n\n    #---------------------------------------------------------------------\n    # add loading buffer\n    # transfer gel slices to larger tubes if needed\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def addLoadingBuffer(ioStr, kitStr)\n\n        kit=findSettings(kitStr)\n\n        # gel items are non-stripwell\n        show do\n            title \"Move gel slices to new tubes\"\n            note \"Carefully transfer the gel slices in the following tubes each to a new 2.0 mL tube using a pipette tip:\"\n            table operations.select{|op| op.temporary[:total_volume].between?(1500, 2000)}.start_table\n                .input_item(ioStr)\n                .end_table\n            note \"Label the new tubes accordingly, and discard the old 1.5 mL tubes.\"\n        end if operations.any? {|op| op.temporary[:total_volume].between?(1500, 2000)}\n\n        # stripwell items\n        show do\n            title \"Add the following volume of #{kit.fetch(\"loadingBuffer\")} to the corresponding well:\"\n            table operations.start_table\n                .input_item(ioStr)\n                .custom_column(heading: \"well\") { |op| op.input(ioStr).column + 1 } # well within collection\n                .custom_column(heading: \"#{kit.fetch(\"loadingBuffer\")} Volume (µL)\", checkable: true) { |op| op.temporary[:qg_volume]}\n                .end_table\n        end if operations.any? { |op| (op.input(ioStr).object_type.name==\"Stripwell\") }\n\n        # multiple gel slice items\n        show do\n            title \"Add the following volume of #{kit.fetch(\"loadingBuffer\")} to each of the listed tubes:\"\n            table operations.start_table\n                .input_item(ioStr)\n                .custom_column(heading: \"add to EACH of these tubes\", checkable: true) { |op| \"1-#{op.input(ioStr).item.get(:number_of_tubes)}\"}\n                .custom_column(heading: \"#{kit.fetch(\"loadingBuffer\")} Volume (µL)\", checkable: true) { |op| op.temporary[:qg_volume]}\n                .end_table\n        end if operations.any? { |op| (op.input(ioStr).object_type.name==\"Multiple Gel Slices\") }\n\n        # non-stripwell, non-multiple gel slice items\n\n        # non-stripwell items\n        show do\n            title \"Add the following volume of #{kit.fetch(\"loadingBuffer\")} to the corresponding tube:\"\n            table operations.start_table\n                .input_item(ioStr)\n                .custom_column(heading: \"#{kit.fetch(\"loadingBuffer\")} Volume (µL)\", checkable: true) { |op| op.temporary[:qg_volume]}\n                .end_table\n        end if operations.any? { |op| !(op.input(ioStr).object_type.name==\"Stripwell\") \u0026\u0026 !(op.input(ioStr).object_type.name==\"Multiple Gel Slices\") }\n\n    end # def\n\n    #---------------------------------------------------------------------\n    # melt gel\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def meltGel(ioStr, kitStr)\n\n        kit=findSettings(kitStr)\n\n        show do\n            title \"Place all tubes in #{kit.fetch(\"meltTemperature\")} C heat block\"\n            timer initial: { hours: 0, minutes: kit.fetch(\"meltTime\") , seconds: 0}\n            note \"Vortex every few minutes to speed up the process\"\n            note \"Retrieve after 5 minutes or when the gel slice is competely dissovled\"\n        end\n\n        show do\n            title \"Equally distribute melted gel slices between tubes\"\n            note \"Equally distribute the volume of the following tubes each between two 1.5 mL tubes:\"\n            table operations.select{ |op| op.temporary[:is_divided]}.start_table\n                .input_item(ioStr)\n                .end_table\n            note \"Label the new tubes accordingly, and discard the old 1.5 mL tubes\"\n        end if operations.any? { |op| op.temporary[:is_divided] }\n\n        # isopropanol volume == 0 for Promega kit\n        show do\n            title \"Add isopropanol\"\n            note \"Add isopropanol according to the following table. Pipette up and down to mix.\"\n            warning \"Divide the isopropanol volume evenly between two 1.5 mL tubes #{operations.select{ |op| op.temporary[:is_divided]}.map{ |op| op.input(\"Gel\").item.id}} since you divided one tube's volume into two earlier.\" if operations.any?{ |op| op.temporary[:is_divided]}\n            table operations.select{ |op| op.temporary[:iso_volume] \u003e 0 }.start_table\n                .input_item(ioStr)\n                .custom_column(heading: \"Isopropanol (µL)\", checkable: true) { |op| op.temporary[:iso_volume]}\n                .end_table\n        end if operations.any? { |op| op.temporary[:iso_volume] \u003e 0}\n\n    end # def\n\n    #---------------------------------------------------------------------\n    # load sample on column\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def loadSample(ioStr,kitStr)\n\n        kit=findSettings(kitStr)\n    \n        # load stripwell samples\n        show do\n            title \"Load sample(s)\"\n            check \"Grab \u003cb\u003e#{operations.length}\u003c/b\u003e #{kit.fetch(\"column\")}(s), label with 1 to #{operations.length} on the sides of the column and the collection tube.\"\n            check \"Be sure not to add more than #{MAX_VOL} µL to each #{kit.fetch(\"column\")}\"\n            warning \"Vortex contents of 1.5 mL tube(s) thoroughly before adding to #{kit.fetch(\"column\")}(s)!\".upcase\n            check \"Add tube contents to LABELED #{kit.fetch(\"column\")}(s) using the following table:\"\n            table operations.start_table\n                .input_item(ioStr)\n                .custom_column(heading: \"well\") { |op| op.input(ioStr).column + 1 } # well within collection\n                .custom_column(heading: kit.fetch(\"column\") ) { |op| operations.index(op) + 1 } # column index\n                .end_table\n            check \"Wait for #{kit.fetch(\"loadingTime\")} min before proceeding\"\n            timer initial: { hours: 0, minutes: kit.fetch(\"loadingTime\"), seconds: 0}\n        end if operations.any? { |op| (op.input(ioStr).object_type.name==\"Stripwell\") }\n\n        # load non-stripwell samples\n        show do\n            title \"Load sample(s)\"\n            check \"Grab \u003cb\u003e#{operations.length}\u003c/b\u003e #{kit.fetch(\"column\")}(s), label with 1 to #{operations.length} on the sides of the column and the collection tube.\"\n            check \"Be sure not to add more than #{MAX_VOL} µL to each #{kit.fetch(\"column\")}\"\n            warning \"Vortex contents of 1.5 mL tube(s) thoroughly before adding to #{kit.fetch(\"column\")}(s)!\".upcase\n            check \"Add tube contents to LABELED #{kit.fetch(\"column\")}(s) using the following table:\"\n            table operations.start_table\n                .input_item(ioStr)\n                .custom_column(heading: kit.fetch(\"column\") ) { |op| operations.index(op) + 1 } # column index\n                .end_table\n            check \"Wait for #{kit.fetch(\"loadingTime\")} min before proceeding\"\n            timer initial: { hours: 0, minutes: kit.fetch(\"loadingTime\"), seconds: 0}\n        end if operations.any? { |op| !(op.input(ioStr).object_type.name==\"Stripwell\") }\n\n        show do\n            title \"Centrifuge sample(s)\"\n            check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to bind DNA to column(s)\"\n            check \"Empty collection column(s) by pouring liquid waste into liquid waste container\"\n            warning \"Add any remaining contents of the 1.5 mL tube(s) to their corresponding columns, and repeat the load and centrifugation steps for all tubes with remaining mixture!\"\n        end\n\n    end # def\n\n    #---------------------------------------------------------------------\n    # load multiple gel slice sample on columns\n    # ioStr - string, name of input item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    # note: ASSUME THAT THERE IS NO BATCHING!!!\n    #---------------------------------------------------------------------\n    def loadMultiGelSample(ioStr,kitStr)\n\n        kit=findSettings(kitStr)\n\n        operations.each { |op|\n\n            num_columns=(op.input(ioStr).item.get(:number_of_tubes).to_f/2.0).ceil\n            # build display table\n            col1=Array (1..op.input(ioStr).item.get(:number_of_tubes).to_f)\n            col2=col1.map {|v| (v/2.0).ceil }\n            col1=col1.unshift(\"Input tube index\")\n            col2=col2.unshift(\"Output column index\")\n            tab = [col1, col2].transpose\n\n            show do\n                title \"Load sample(s)\"\n                check \"Grab \u003cb\u003e#{num_columns}\u003c/b\u003e #{kit.fetch(\"column\")}(s), label them 1 to #{num_columns}\"\n                note \"You are loading the contents of two input tubes on each column, this may require \u003cb\u003eMULTIPLE ROUNDS\u003c/b\u003e of loading\"\n                note \"Be sure not to add more than #{MAX_VOL} µL to each #{kit.fetch(\"column\")}\"\n                check \"Vortex tube(s), then transfer the contents of the tube(s) to the #{kit.fetch(\"column\")}(s) using the following table:\"\n                table tab\n                check \"Wait \u003cb\u003e1 min\u003c/b\u003e\"\n                check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to bind DNA to column(s)\"\n                check \"Empty collection column(s) by pouring liquid waste into liquid waste container\"\n                warning \"Add any remaining contents of the 1.5 mL tube(s) to their corresponding columns, and repeat the vortex, load, wait,  and centrifugation steps\"\n            end\n        }\n    end # def\n\n    #---------------------------------------------------------------------\n    # wash step\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def washSample(kitStr)\n\n        kit=findSettings(kitStr)\n\n        show do\n          title \"Wash sample(s)\"\n\n          if kitStr==\"Qiagen\" || kitStr==\"QiagenPink\"\n            check \"Add #{kit.fetch(\"secondRinseVol\")} µL #{kit.fetch(\"loadingBuffer\")} to columns\"\n            check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to wash column(s)\"\n            check \"Empty collection tube(s)\"\n          end\n\n          check \"Add #{kit.fetch(\"firstRinseVol\")} µL #{kit.fetch(\"washBuffer\")} to columns\"\n          check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to wash column(s)\"\n          check \"Empty collection tube(s)\"\n\n          check \"Add #{kit.fetch(\"secondRinseVol\")} µL #{kit.fetch(\"washBuffer\")} to columns\"\n          check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to wash column(s)\"\n          check \"Empty collection tube(s)\"\n\n          check \"Spin at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min to remove all buffer from column(s)\"\n        end\n    end # def\n\n       #---------------------------------------------------------------------\n    # elution step - multiple gel slice version\n    # ioStr1 - string, name of output item for 1st elution\n    # ioStr2 - string, name of output item for 2nd elution\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    #---------------------------------------------------------------------\n    def eluteMultipleGelSample(inStr,outStr1,outStr2,kitStr)\n\n        kit=findSettings(kitStr)\n\n        operations.each { |op|\n\n            num_columns=(op.input(inStr).item.get(:number_of_tubes).to_f/2.0).ceil\n\n            # # build display table\n            # col1=Array (1..op.input(inStr).item.get(:number_of_tubes).to_f)\n            # col2=col1.map {|v| (v/2.0).ceil }\n            # col1=col1.unshift(\"Input tube index\")\n            # col2=col2.unshift(\"Output column index\")\n            # tab = [col1, col2].transpose\n\n\n            # incubation+elution- first round\n            show do\n                title \"Elution - first round\"\n                check \"Grab #{num_columns} sterile 1.5 mL tubes and label \u003cb\u003eALL\u003c/b\u003e of them \u003cb\u003e1\u003c/b\u003e\"\n                check \"Transfer the #{kit.fetch(\"column\")} columns from the collection tubes to the 1.5 mL tubes labeled \u003cb\u003e1\u003c/b\u003e\"\n                check \"Add \u003cb\u003e#{kit.fetch(\"elutionVolume\")} µL\u003c/b\u003e of \u003cb\u003ePREHEATED\u003c/b\u003e molecular grade water to center of each column\"\n                warning \"Be careful to not pipette on the wall of the tube\"\n                timer initial: {hours: 0, minutes: kit.fetch(\"elutionTime\"), seconds: 0}\n                check \"Spin for #{kit.fetch(\"spinTime\")} minute(s) at at #{kit.fetch(\"spinG\")} xg to elute DNA\"\n                warning \"Retain the columns for a second elution!\"\n            end\n\n            # incubation+elution - second round\n            show do\n                title \"Elution - second round\"\n                check \"Grab #{num_columns} sterile 1.5 mL tubes and label \u003cb\u003eALL\u003c/b\u003e of them \u003cb\u003e2\u003c/b\u003e\"\n                check \"Transfer the columns from the tubes labeled \u003cb\u003e1\u003c/b\u003e to the tubes labeled \u003cb\u003e2\u003c/b\u003e\"\n                check \"Add \u003cb\u003e#{kit.fetch(\"elutionVolume\")} µL\u003c/b\u003e of \u003cb\u003ePREHEATED\u003c/b\u003e molecular grade water to center of each column\"\n                warning \"Be careful to not pipette on the wall of the tube\"\n                timer initial: {hours: 0, minutes: kit.fetch(\"elutionTime\"), seconds: 0}\n                check \"Spin for #{kit.fetch(\"spinTime\")} minute(s) at at #{kit.fetch(\"spinG\")} xg to elute DNA\"\n                check \"Remove and trash the columns\"\n            end\n\n            # combine tubes with high, low cencentration samples\n            show do\n                title \"Combine samples\"\n                check \"Combine the contents of the tubes labeled \u003cb\u003e1\u003c/b\u003e into one 1.5 mL tube (add one to the other) and label it \u003cb\u003e#{op.output(outStr1).item}\u003c/b\u003e\"\n                check \"Combine the contents of the tubes labeled \u003cb\u003e2\u003c/b\u003e into one 1.5 mL tube (add one to the other) and label it \u003cb\u003e#{op.output(outStr2).item}\u003c/b\u003e\"\n                check \"Trash the empty used tubes\"\n            end\n\n        } # each\n\n    end # def\n\n    #---------------------------------------------------------------------\n    # elution step\n    # ioStr - string, name of output item\n    # kitStr - string, name of kit. \"Qiagen\", Promega\"\n    # doTwice - repeat elution using flowthrough if ==1, else only 1 elution round\n    #---------------------------------------------------------------------\n    def eluteSample(ioStr,kitStr,doTwice=1)\n\n        kit=findSettings(kitStr)\n\n        show do\n            title \"Elution\"\n            check \"Apply the printed labels to clean 1.5 mL tubes\"\n            check \"Transfer the #{kit.fetch(\"column\")}s to the labeled 1.5 mL tubes using the following table:\"\n            table operations.start_table\n                .custom_column(heading: kit.fetch(\"column\")) { |op| operations.index(op) + 1 }\n                .output_item(ioStr, heading: \"1.5 mL tube\", checkable: true)\n            .end_table\n            check \"Add #{kit.fetch(\"elutionVolume\")} µL of \u003cb\u003ePREHEATED\u003c/b\u003e #{kit.fetch(\"elutionBuffer\")} to center of the column\"\n            warning \"Be careful not to pipette on the wall of the tube\"\n            warning \"Be careful not to touch the column with the tip\"\n            check \"Set a timer for #{kit.fetch(\"elutionTime\")} min. When it finishes, proceed to the next step.\"\n            timer initial: { hours: 0, minutes: kit.fetch(\"elutionTime\") , seconds: 0}\n            if(doTwice==1)\n                check \"Elute DNA into 1.5 mL tubes by spinning at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min, \u003cb\u003eKEEP\u003c/b\u003e the columns\"\n                check \"Pipette the flow through (#{kit.fetch(\"elutionVolume\")} µL) onto the center of the column, spin again at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min\"\n            else\n                check \"Elute DNA into 1.5 mL tubes by spinning at #{kit.fetch(\"spinG\")} xg for #{kit.fetch(\"spinTime\")} min\"\n            end\n            check \"Discard the columns\"\n            check \"Set temperature block #{TEMP_BLOCK} back to #{TEMP_BLOCK_T} C\"\n        end\n    end # def\n\n    #---------------------------------------------------------------------\n    # measure concentration of samples, if not already measured\n    # inputs: ioStr - string, name of output item to which the concentration is associated\n    #         inOut - \"input\" or \"output\", indicates whether ioStr refers to an input or output item\n    #         ops - which ops to measure\n    #---------------------------------------------------------------------\n    def measureConcentration(ioStr,inOut,ops=operations)\n\n        case inOut\n\n        when \"input\"\n\n            show do\n                title \"Measure concentration\"\n                note \"Go to B9 and vortex and nanodrop the following 1.5 mL tube(s), and enter the DNA concentration(s):\"\n                table ops.start_table\n                    .input_item(ioStr)\n                    .get(:conc, type: 'number', heading: \"Concentration (ng/uL)\", default: 7)\n                    .get(:note, type: 'text', heading: \"Notes\")\n                    .end_table\n            end if ops.any? { |op| op.input_data(ioStr, :concentration).nil? }\n            ops.each do |op|\n                op.set_input_data(ioStr, :concentration, op.temporary[:conc])\n                op.input(ioStr).item.notes =  op.temporary[:note]\n            end if ops.any? { |op| op.input_data(ioStr, :concentration).nil? }\n\n        when \"output\"\n\n            show do\n                title \"Measure concentration\"\n                note \"Go to B9 and vortex and nanodrop the following 1.5 mL tube(s), and enter the DNA concentration(s):\"\n                table ops.start_table\n                    .output_item(ioStr)\n                    .get(:conc, type: 'number', heading: \"Concentration (ng/µL)\", default: 7)\n                    .get(:note, type: 'text', heading: \"Notes\")\n                    .end_table\n            end if ops.any? { |op| op.output_data(ioStr, :concentration).nil? }\n            ops.each do |op|\n                op.set_output_data(ioStr, :concentration, op.temporary[:conc])\n                op.output(ioStr).item.notes =  op.temporary[:note]\n            end if ops.any? { |op| op.output_data(ioStr, :concentration).nil? }\n\n        else\n            show do\n                title \"Problem with inOut string #{inOut} in #{__method__.to_s}, exiting.\"\n                return\n            end\n        end # case\n\n    end # def\n\n    #---------------------------------------------------------------------\n    # save/discard samples based on concentration\n    # inputs: ioStr - string, name of output item to which the concentration is associated\n    #         ops - which operations to check\n    # outputs:\n    #---------------------------------------------------------------------\n    def saveOrDiscard(ioStr,ops=operations)\n        choices = {}\n\n        choices = show do\n            title \"Decide whether to keep dilute stocks\"\n            note \"The below stocks have a concentration of less than 10 ng/µL\"\n            note \"Talk to a lab manager to decide whether or not to discard the following stocks\"\n            ops.select{ |op| op.output_data(ioStr, :concentration) \u003c 10}.each do |op|\n                select [\"Yes\", \"No\"], var: \"d#{op.output(ioStr).item.id}\", label: \"Discard Fragment Stock #{op.output(ioStr).item}\", default: 0\n            end\n        end if ops.any?{ |op| op.output_data(ioStr, :concentration) \u003c 10}\n\n        show do\n          title \"Discard fragment stocks\"\n          note \"Discard the following fragment stocks:\"\n          note ops.select{ |op| choices[\"d#{op.output(ioStr).item.id}\".to_sym] == \"Yes\"}\n            .map{ |op| op.output(ioStr).item}\n            .join(\", \")\n        end if choices.any? { |key, val| val == \"Yes\"}\n\n        ops.select { |op| choices[\"d#{op.output(ioStr).item.id}\".to_sym] == \"Yes\" }.each do |op|\n            frag = op.output(ioStr).item\n            op.error :low_concentration, \"The concentration of #{frag} was too low to continue\"\n            frag.mark_as_deleted\n        end\n    end # def\n\n    #---------------------------------------------------------------------\n    # sort items (including stripwell subitems) for table display\n    # algorithm: increasing in ascending numberical order of table_val, where table_val is defined as:\n    # stripwell_id.colum_id (floating point)\n    # inputs: op - operation\n    #         ioStr - string, name of input/output used for sorting\n    #         inOut - \"input\" or \"output\"\n    #---------------------------------------------------------------------\n    def sortOperations(ioStr,inOut)\n        operations.sort! { |a, b| tableVal(a, ioStr, inOut) \u003c=\u003e tableVal(b, ioStr, inOut) }\n    end\n    #---------------------------------------------------------------------\n    # calculates value of item (including stripwell subitems) for sort\n    # algorithm: increasing in ascending numberical order of table_val, where table_val is defined as:\n    # stripwell_id.colum_id (floating point)\n    # inputs: op - operation\n    #         ioStr - string, name of input/output used for sorting\n    #         inOut - \"input\" or \"output\"\n    #---------------------------------------------------------------------\n    def tableVal(op, ioStr, inOut)\n        val=0\n        case inOut\n        when \"input\"\n            val=op.input(ioStr).item.id.to_f + op.input(ioStr).column.to_f/100.0\n        when \"output\"\n            val=op.output(ioStr).item.id.to_f + op.output(ioStr).column.to_f/100.0\n        end\n        # return\n        val\n    end\n\nend # module"}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":749,"name":"Plasmid Library","description":"A special case of plasmid that contains many unique sequences","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:45:59.000-08:00","updated_at":"2018-01-11T14:45:59.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":751,"name":"Post-exonuclease","description":"yeast DNA library sample after exonuclease step, before NGS library prep","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:48:06.000-08:00","updated_at":"2018-01-11T14:48:06.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Digest Genomic DNA","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Zymoprepped sample","sample_types":["DNA Library"],"object_types":["Plasmid Library"],"part":false,"array":false,"routing":null,"preferred_operation_type_id":369,"preferred_field_type_id":1751,"choices":null},{"ftype":"sample","role":"output","name":"Exonucleased sample","sample_types":["DNA Library"],"object_types":["Post-exonuclease"],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n# Sarah Goldberg\n# Refactored by Devin Strickland\n\nneeds 'Next Gen Prep/NextGenPrepHelper'\nneeds 'Yeast Display/YeastDisplayHelper'\nneeds 'Standard Libs/AssociationManagement'\nneeds 'Standard Libs/Units'\nneeds 'Standard Libs/Debug'\n\nclass Protocol\n  include AssociationManagement\n  include Debug\n  include NextGenPrepHelper\n  include PartProvenance\n  include Units\n  include YeastDisplayHelper\n\n  INPUT = 'Zymoprepped sample'\n  OUTPUT = 'Exonucleased sample'\n\n  BUFFER = 'Lambda Exonuclease Buffer'\n  BUFFER_VOL = { qty: 4, units: MICROLITERS }.freeze\n\n  EXO = 'Exonuclease I'\n  EXO_VOL = { qty: 4, units: MICROLITERS }.freeze\n\n  LAMBDA = 'Lambda Exonuclease'\n  LAMBDA_VOL = { qty: 2, units: MICROLITERS }.freeze\n\n  MAKE_EXTRA_REAGENT = 1.1\n\n  INCUBATION_LOCATION = 'incubator'\n  INCUBATION_TEMP = { qty: 30, units: DEGREES_C }.freeze\n  INCUBATION_TIME = { qty: 90, units: MINUTES }.freeze\n\n  INACTIVATION_LOCATION = 'dry block'\n  INACTIVATION_TEMP = { qty: 80, units: DEGREES_C }.freeze\n  INACTIVATION_TIME = { qty: 20, units: MINUTES }.freeze\n\n  def main\n    operations.sort_by! { |op| op.input(INPUT).item.id }\n\n    operations.retrieve.make\n\n    assign_tube_numbers(INPUT, OUTPUT)\n    gather_enzymes_and_buffer\n    set_up_reactions_and_run(operations)\n    number_tubes_and_columns\n    transfer_to_columns\n    wash_samples(pb_washes = 0)\n    elute_samples(OUTPUT)\n\n    operations.each do |op|\n      add_sample_provenance(\n        input: op.input(INPUT).item,\n        output: op.output(OUTPUT).item\n      )\n      unless op.input(INPUT).item.get(:bin).nil? # sorted sample\n        op.output(OUTPUT).item.associate(:bin, op.input(INPUT).item.get(:bin))\n      end\n      op.input(INPUT).item.mark_as_deleted\n    end\n\n    operations.store\n\n    {}\n  end\n\n  def gather_enzymes_and_buffer\n    materials = [\n      Sample.find_by_name(BUFFER).in('Enzyme Buffer Stock').first,\n      Sample.find_by_name(LAMBDA).in('Enzyme Stock').first,\n      Sample.find_by_name(EXO).in('Enzyme Stock').first\n    ]\n\n    show do\n      title 'Grab an ice block'\n      warning 'In the following step you will need to take enzymes out of ' \\\n              'the freezer. Make sure the enzymes are kept on ice for the ' \\\n              'duration of the protocol.'\n    end\n\n    take(materials, interactive: true, method: 'boxes')\n  end\n\n  def show_prepare_master_mix(volume_factor)\n    show do\n      title 'Prepare master mix'\n\n      warning 'Keep exonucleases and Master Mix on cold block!'\n\n      check \"Label a #{MICROFUGE_TUBE} 'Master Mix'\"\n      check \"Add \u003cb\u003e#{expanded_volume_display(BUFFER_VOL, volume_factor, 1)}\u003c/b\u003e of #{BUFFER} to Master Mix\"\n      check \"Add \u003cb\u003e#{expanded_volume_display(EXO_VOL, volume_factor, 1)}\u003c/b\u003e of #{EXO} to Master Mix\"\n      check \"Add \u003cb\u003e#{expanded_volume_display(LAMBDA_VOL, volume_factor, 1)}\u003c/b\u003e of #{LAMBDA} to Master Mix\"\n\n      check 'Flick the tube gently to mix'\n    end\n  end\n\n  def show_prepare_reactions(operations)\n    mm_vol = BUFFER_VOL[:qty] + EXO_VOL[:qty] + LAMBDA_VOL[:qty]\n    show do\n      title 'Prepare exonuclease reactions'\n\n      check 'Re-label tubes according to the table and then add ' \\\n            '10uL Master Mix according to the table.'\n\n      table operations.start_table\n                      .input_item(INPUT)\n                      .custom_column(\n                        heading: 'Tube number',\n                        checkable: true\n                      ) { |op| op.input(INPUT).item.associations[:tube_number] }\n                      .custom_column(\n                        heading: \"Master Mix (#{BUFFER_VOL[:units]})\",\n                        checkable: true\n                      ) { |_op| mm_vol }\n                      .end_table\n\n      check 'Briefly vortex and spin.'\n    end\n  end\n\n  def set_up_reactions_and_run(operations)\n    show_prepare_master_mix(operations.length * MAKE_EXTRA_REAGENT)\n    show_prepare_reactions(operations)\n\n    show do\n      title \"Incubate at #{qty_display(INCUBATION_TEMP)}\"\n\n      check \"Place the tube in the #{qty_display(INCUBATION_TEMP)} \" \\\n            \"#{INCUBATION_LOCATION} for #{qty_display(INCUBATION_TIME)}\"\n      check \"Bump a heat block up to #{qty_display(INACTIVATION_TEMP)} for the next step\"\n      note \"Check with a manager about which heat block to set up\"\n    end\n\n    show do\n      title \"Inactivate at #{qty_display(INACTIVATION_TEMP)}\"\n\n      check \"Place the tube in the #{qty_display(INACTIVATION_TEMP)} \" \\\n            \"#{INACTIVATION_LOCATION} for #{qty_display(INACTIVATION_TIME)}\"\n    end\n  end\n\n  def transfer_to_columns\n    show do\n      title \"Transfer to #{COLUMN}s\"\n\n      check 'When the inactivation is finished, retrieve the samples'\n      note '\u003cb\u003eFor each sample:\u003c/b\u003e'\n      check \"Add #{qty_display(PB_VOL)} #{PB}\"\n      check 'Vortex and spin samples'\n      check \"Transfer the mixture to the #{COLUMN} with the same number\"\n    end\n  end\n\n  def add_sample_provenance(input:, output:)\n    input_associations = AssociationMap.new(input)\n    output_associations = AssociationMap.new(output)\n    add_provenance(from: input, from_map: input_associations,\n                   to: output, to_map: output_associations)\n    input_associations.save\n    output_associations.save\n  end\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(op)\n    {\n        materials: 3.95,\n        labor: 14.23\n    }      \nend","documentation":"Step 3 in preparation of yeast DNA library samples for NGS. \nFull flow is:\n1. Store concentrated  sample in Zymoprep Solution 1, in -80\n2. Zymoprep sample and clean\n3. Exonuclease digestion and purification of sample\n4. qPCR to amplify, clean up, using pETCON adapters \n5. qPCR to amplify and add illumina adapters","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":760,"name":"Illuminated Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences and adapters for Illumina sequencing","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-14T09:22:33.000-07:00","updated_at":"2018-03-14T09:22:33.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Dilute to 4nM","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"DNA library in","sample_types":["DNA Library"],"object_types":["Illuminated Fragment Library"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":411,"preferred_field_type_id":2573,"choices":null},{"ftype":"sample","role":"output","name":"DNA library out","sample_types":["DNA Library"],"object_types":["Illuminated Fragment Library"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# SG\n#\n# dilute samples with known concentration to 4nM\nneeds \"Standard Libs/SortHelper\"\nneeds \"Next Gen Prep/NextGenPrepHelper\"\nneeds \"Standard Libs/Feedback\"\n\nclass Protocol\n\n    include SortHelper, NextGenPrepHelper, Feedback\n\n    # M20 location\n    NGS_BOX=\"NGS 4nM temp box in SF2\"\n\n    # I/O\n    IN=\"DNA library in\"\n    OUT=\"DNA library out\"\n\n    SAMPLE_VOL_uL=1 # uL, starting sample volume for calculations\n    FINAL_VOL_uL=10 # uL, minimal final volume for output stock\n    MIN_VOL=0.5 # minimal volume for pippeting\n    TOLERANCE=0.1 # allowed error in concentration\n    FINAL_nmol_per_uL=(5.0/1e6) # target concentration, 4nM is 4/1e6 nmol/uL\n\n\n    TEST_CONCENTRATIONS = [0.5, 0.6, 0.7, 0.719, 0.72, 0.8, 0.9, 1.0, 2.0, 4.0] # used for debug\n    TEST_BINS = [\"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\", \"pos\", \"neg\"] # used for debug\n    TEST_BARCODES = [\"AAAAA\", \"TTTTT\", \"GGGGG\", \"CCCCC\", \"ATATAT\", \"CGCGCG\", \"ACACAC\", \"TGTGTG\", \"ATCGAT\", \"TGCATG\"] # used for debug\n\n    def main\n\n        associate_random_barcodes(operations: operations, in_handle: IN) if debug\n\n        ops_sorted=sortByMultipleIO(operations, [\"in\"], [IN], [\"id\"], [\"item\"])\n        operations=ops_sorted\n\n        operations.map { |op|\n            op.input(IN).item.associate(:concentration, (TEST_CONCENTRATIONS.rotate!.first))\n            op.input(IN).item.associate(:length, 270 )\n            op.input(IN).item.associate(:bin, (TEST_BINS.rotate!.first))\n            op.input(IN).item.associate(:barcode, (TEST_BARCODES.rotate!.first))\n        } if(debug)\n\n        # get lengths of all fragments\n        operations.each { |op|\n            if(!op.input(IN).sample.nil?)\n                nm=SampleType.find(op.input(IN).sample.sample_type_id).name # sample type\n                case nm\n                when \"DNA Library\" # should have \"Library Stock\" object_type with associated \"length\"\n                    stock=find(:item, object_type: {name: \"Library Stock\"}, sample: {name: op.input(IN).sample.name} ).first\n                    if(!stock.nil?)\n                        op.temporary[:length] = stock.get(:length)\n                    end\n                end\n            end\n        }\n\n        # ask tech to enter missing lengths\n        length_unknown=operations.select{|op| op.temporary[:length].nil?}\n        if(length_unknown.any?)\n            # get lengths for all samples for which length is not defined - ideally this should not be needed!!!\n            show do\n                title \"Enter the expected lengths in bp for these samples:\"\n                note \"Ask a lab manager if you do not know\"\n                table length_unknown.start_table\n                    .custom_column(heading: \"Sample Name\", checkable: true) { |op| op.input(IN).sample.name }\n                    .get(:length, type: 'number', heading: \"Expected length (bp)\", default: 1)\n                    .end_table\n            end\n        end\n        operations.each { |op|\n            op.input(IN).item.associate :length, op.temporary[:length]\n        }\n\n        # get rid of operations with no concentration or length\n        operations.each { |op|\n            begin\n                tmp = op.input(IN).item.get(:concentration)\n                #show { note \"conc=#{tmp}\" } if debug\n            rescue\n                op.error(:no_concentration, \"The library has no concentration. Please Qubit and replan.\")\n                # TODO : move qubit code to library, call same code here\n            end\n\n            begin\n                tmp = op.input(IN).item.get(:length)\n                #show { note \"length=#{tmp}\" } if debug\n            rescue\n                op.error(:no_length, \"The library has no length\")\n            end\n        }\n\n        ops = operations.running\n        operations = ops  # all operations now have :concentration and :length\n\n        operations.each { |op|\n            if(concentration_in_nmol(op.input(IN).item.get(:concentration).to_f, op.input(IN).item.get(:length).to_f) \u003c FINAL_nmol_per_uL)\n                op.error(:low_concentration, \"Concentration too low for NGS sequencing prep\")\n            end\n        }\n\n        if(!operations.running.any?)\n            show { note \"No operations left in Dilute to 4nM, returning.\" }\n            return\n        end\n\n        # sort running ops so that input ids and sample labels are in consecutive order\n        ops = sortByMultipleIO(operations.running, [\"in\"], [IN], [\"id\"], [\"item\"])\n        operations = ops\n        operations.make\n        operations.retrieve\n\n        # vortex and spin\n        show {\n            title \"Vortex and spin samples\"\n            check \"Vortex and spin samples #{operations.map{|op| op.input(IN).item}.to_sentence } to mix contents thoroughly\"\n        }\n\n        # find sample and dilution volumes\n        # on high sample volume end of scale (low starting concentration) 1 jump off is ~(0.5uL/10uL) or ~5% change in concentration, ok\n        # on low sample volume (high initial concentration) it is ~(0.5uL/5uL) or %10 off\n        operations.each { |op|\n            sample_volume = SAMPLE_VOL_uL.to_f\n            water_volume = dilution_volume(op.input(IN).item.get(:concentration).to_f, op.input(IN).item.get(:length).to_f, SAMPLE_VOL_uL).to_f\n\n            fac1=0 # for higher volume if final volume too low\n            fac2=0 # for higher volume if sample concentration is high\n\n            # make sure have enough (\u003e5uL) for next dilution step\n            fac1=(FINAL_VOL_uL.to_f/(sample_volume + water_volume))\n            # make sure there will not be more than ~10% error in sample concentration\n            min_sample_vol=MIN_VOL.to_f/TOLERANCE\n            fac2 = min_sample_vol/sample_volume\n\n            fac=[fac1,fac2].max\n            if(fac\u003e1)\n                sample_volume = fac*sample_volume\n                water_volume = fac*water_volume\n            end\n\n            op.associate(:sample_volume, sample_volume.floor + MIN_VOL*(((sample_volume - sample_volume.floor)/MIN_VOL).round) )\n            op.associate(:water_volume, water_volume.floor + MIN_VOL*(((water_volume - water_volume.floor)/MIN_VOL).round) )\n        }\n\n\n        # prep samples\n        show {\n            title \"Dilute samples to 4nM (Transfer Water)\"\n            check \"Grab #{operations.length} 1.5 mL tubes(s), label them \u003cb\u003e4 nM\u003c/b\u003e on the side of the tube\"\n            check \"Additionally label them #{operations.map { |op| op.output(OUT).item.to_s}.to_sentence }\"\n            note \"Prepare the following 4nM samples:\"\n\n            table operations.start_table\n                .output_item(OUT, heading: \"DNA Library (output)\")\n                .custom_column(heading: \"Water volume (µL)\", checkable: true) { |op| op.get(:water_volume) }\n                .end_table\n            check \"Vortex and spin \u003cb\u003e4 nM\u003c/b\u003e samples to mix contents thoroughly\"\n        }\n        \n        show do \n            title \"Dilute samples to 4nM (Transfer Sample)\"\n            check \"Grab tubes #{operations.map { |op| op.output(OUT).item.to_s}.to_sentence }\"\n            note \"Transfer associated sample volume from input to output:\"\n            \n            table operations.start_table\n                .input_item(IN, heading: \"DNA Library (input)\")\n                .custom_column(heading: \"Sample volume (µL)\", checkable: true) { |op| op.get(:sample_volume) }\n                .output_item(OUT, heading: \"DNA Library (output)\")\n                .end_table\n        end\n\n        operations.each { |op|\n            op.output(OUT).item.move(NGS_BOX)   # REMOVE THIS!!!!\n            op.output(OUT).item.associate(:tag, \"4 nM\" ) # so not confused with 4ng/uL\n        }\n\n        operations.running.each do |op|\n            txfr_barcode(op, IN, OUT)\n            txfr_bin(op, IN, OUT)\n        end\n\n        if debug\n            display_barcode_associations(operations: operations, in_handle: IN, out_handle: OUT)\n        end\n\n        # display map\n        show {\n            title \"List of 4nM outputs\"\n            table operations.start_table\n                .output_item(OUT, heading: \"DNA Library (output)\")\n                .custom_column(heading: \"name\", checkable: false) { |op|\n                    \"#{op.output(OUT).item.sample.name}\" }\n                .custom_column(heading: \"bin\", checkable: false) { |op|\n                    op.output(OUT).item.get(:bin) || \"N/A\" }\n                .custom_column(heading: \"Illumina index\", checkable: false) { |op|\n                    op.output(OUT).item.get(:barcode) || \"N/A\" }\n                .end_table\n        }\n\n        operations.store\n\n        get_protocol_feedback\n\n        return {}\n\n    end # main\n\n    #---------------------------------------------------------------\n    # dilution == water volume, for given init. concentration, length, and sample volume. (final concentration is 4nM)\n    #---------------------------------------------------------------\n    def dilution_volume(conc, length, vol)\n        return vol*((concentration_in_nmol(conc, length)/FINAL_nmol_per_uL) - 1)\n    end # def\n\n    #---------------------------------------------------------------\n    # calculates concentration in nmol\n    # input in ng/uL, output in nM/uL. assumes dsDNA:\n    # nmols = (weight in ng) / (base pairs x 650 daltons)\n    #---------------------------------------------------------------\n    def concentration_in_nmol(conc_in_ng, length)\n        return conc_in_ng.to_f/(length * 650)\n    end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 3.89, materials: 0.06 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":11,"parent_id":4,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":12,"parent_id":4,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":13,"parent_id":4,"name":"Template","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2,"field_type_id":13,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":3,"field_type_id":13,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":4,"field_type_id":13,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":5,"field_type_id":13,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}},{"id":2547,"field_type_id":13,"sample_type_id":70,"object_type_id":null,"created_at":"2018-09-18T16:02:54.000-07:00","updated_at":"2018-09-18T16:02:54.000-07:00","sample_type":{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00"}}],"sample_types":["Plasmid","E coli strain","Fragment","Yeast Strain","DNA Library"],"object_types":[null,null,null,null,null]},{"id":14,"parent_id":4,"name":"Forward Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":6,"field_type_id":14,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2664,"field_type_id":14,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":15,"parent_id":4,"name":"Reverse Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":7,"field_type_id":15,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2665,"field_type_id":15,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":16,"parent_id":4,"name":"Restriction Enzyme(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":17,"parent_id":4,"name":"Yeast Marker","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6423,"parent_id":4,"name":"Fragment Mix Array","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-24T11:05:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2667,"field_type_id":6423,"sample_type_id":1,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2668,"field_type_id":6423,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]}]},{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":4,"parent_id":2,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:30:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5,"parent_id":2,"name":"Sequence Verification","ftype":"url","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6,"parent_id":2,"name":"Bacterial Marker","ftype":"string","choices":"Amp,Kan,Amp + Kan,Spec,Kan + Spec,Chlor,Tet,NA,Other","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-12-27T11:26:31.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7,"parent_id":2,"name":"Yeast Marker","ftype":"string","choices":"HIS,TRP,URA,LEU,NatMX,KanMX,HygMX,BleoMX,5FOA,NA,Other","array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-02-13T10:49:58.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":27,"field_type_id":7,"sample_type_id":1,"object_type_id":null,"created_at":"2017-02-13T10:49:58.000-08:00","updated_at":"2017-02-13T10:49:58.000-08:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":8,"parent_id":2,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":42,"parent_id":2,"name":"Sequencing Primers","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":26,"field_type_id":42,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":46,"parent_id":2,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":29,"field_type_id":46,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":47,"parent_id":2,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":30,"field_type_id":47,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":48,"parent_id":2,"name":"QC_length","ftype":"number","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5816,"parent_id":2,"name":"Transformation Temperature","ftype":"number","choices":"37,30","array":false,"required":false,"created_at":"2018-09-17T15:02:22.000-07:00","updated_at":"2018-11-06T11:31:23.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":16203,"parent_id":2,"name":"Comp Cells","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":3108,"field_type_id":16203,"sample_type_id":3,"object_type_id":null,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":10,"parent_id":3,"name":"Parent","ftype":"sample","choices":null,"array":null,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1,"field_type_id":10,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00","field_types":[{"id":18,"parent_id":5,"name":"Parent","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-25T08:43:19.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":8,"field_type_id":18,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]},{"id":19,"parent_id":5,"name":"Integrant","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":9,"field_type_id":19,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":10,"field_type_id":19,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid","Fragment"],"object_types":[null,null]},{"id":20,"parent_id":5,"name":"Plasmid","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":11,"field_type_id":20,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid"],"object_types":[null]},{"id":21,"parent_id":5,"name":"Integrated Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":22,"parent_id":5,"name":"Plasmid Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":23,"parent_id":5,"name":"Mating Type","ftype":"string","choices":"MATa,MATalpha,Diploid","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-10T09:05:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":24,"parent_id":5,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":12,"field_type_id":24,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":25,"parent_id":5,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":13,"field_type_id":25,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":43,"parent_id":5,"name":"QC_length","ftype":"number","choices":"","array":false,"required":false,"created_at":"2016-05-20T14:29:39.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":44,"parent_id":5,"name":"Comp_cell_limit","ftype":"string","choices":"Yes,No","array":false,"required":false,"created_at":"2016-05-20T14:35:37.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":83,"parent_id":5,"name":"Media","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2017-07-12T19:25:25.000-07:00","updated_at":"2017-07-12T19:25:25.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":954,"parent_id":5,"name":"Has this strain passed QC?","ftype":"string","choices":"No,Yes","array":false,"required":false,"created_at":"2017-10-31T11:39:27.000-07:00","updated_at":"2017-10-31T20:14:46.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6455,"parent_id":5,"name":"Haploids","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2669,"field_type_id":6455,"sample_type_id":5,"object_type_id":null,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]}]}],"object_types":[{"id":785,"name":"50 mL Agarose Gel in Gel Box","description":"Used to run gels","min":0,"max":100,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-22T15:41:23.000-07:00","updated_at":"2018-05-22T15:49:37.000-07:00","unit":"box","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"","rows":2,"columns":6,"sample_type_name":null},{"id":456,"name":"50 mL 0.8 Percent Agarose Gel in Gel Box","description":"Used to run gels;","min":0,"max":100,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2015-02-04T18:20:47.000-08:00","updated_at":"2017-07-13T11:19:50.000-07:00","unit":"box","cost":0.01,"release_method":"return","release_description":"Return this item","sample_type_id":null,"image":"","prefix":"","rows":2,"columns":6,"sample_type_name":null},{"id":784,"name":"Library Gel Slice","description":"Multiple dsDNA fragments in a gel slice ","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-03T10:34:24.000-07:00","updated_at":"2018-05-03T10:34:24.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":292,"name":"Gel Slice","description":"Gel Slice cut from a gel lane after gel was run. Often placed in a 1.5 mL tube.","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2014-01-10T15:30:06.000-08:00","updated_at":"2014-01-14T15:24:23.000-08:00","unit":"Fragment","cost":10.0,"release_method":"dispose","release_description":"","sample_type_id":4,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Fragment"}],"operation_type":{"name":"Extract Gel Slice (NGS)","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Fragment","sample_types":["DNA Library","Fragment","Plasmid"],"object_types":["50 mL Agarose Gel in Gel Box","50 mL 0.8 Percent Agarose Gel in Gel Box","50 mL 0.8 Percent Agarose Gel in Gel Box"],"part":true,"array":false,"routing":"F","preferred_operation_type_id":393,"preferred_field_type_id":3760,"choices":null},{"ftype":"sample","role":"output","name":"Fragment","sample_types":["DNA Library","Fragment","Plasmid"],"object_types":["Library Gel Slice","Gel Slice","50 mL 0.8 Percent Agarose Gel in Gel Box"],"part":false,"array":false,"routing":"F","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# Extract Fragment Protocol\n# V1.0.2; 2017-07-17 JV\n# Written by Ayesha Saleem\n# Revised by Justin Vrana 2017-07-13; corrected upload issue\n# Revised by Justin Vrana 2017-07-17; unique upload table\n# Revised by SG 05-2018; accepts general gel inputs, does not assume output sample property \"Length\"\n\nneeds \"Standard Libs/Feedback\"\nneeds \"Next Gen Prep/NextGenPrepHelper\"\nneeds \"Standard Libs/UploadHelper\"\n\nclass Protocol\n\n    include Feedback, NextGenPrepHelper, UploadHelper\n\n    # I/O\n    FRAGMENT = \"Fragment\"\n    FRAGMENT_OUT =\"Fragment\"\n    MIN_WEIGHT = 0.0\n    MAXWEIGHT = 10.0\n    TRIES = 3\n\n    def main\n\n        associate_random_barcodes(operations: operations, in_handle: FRAGMENT) if debug\n\n        # Sort operations by gels and columns (these can get out of order from PCR)\n        operations.sort! { |op1, op2|\n            fv1 = op1.input(FRAGMENT)\n            fv2 = op2.input(FRAGMENT)\n            [fv1.item.id, fv1.row, fv1.column] \u003c=\u003e [fv2.item.id, fv2.row, fv2.column]\n        }\n\n        # find expected lengths for inputs - may need to add/change cases in the future\n        operations.each { |op|\n            if(!op.output(FRAGMENT).sample.nil?)\n                nm=SampleType.find(op.output(FRAGMENT).sample.sample_type_id).name # sample type\n                case nm\n                when \"Fragment\" || \"Plasmid\" # have sample property \"Length\"\n                    op.temporary[:length] = op.output(FRAGMENT).sample.properties[\"Length\"]\n                when \"DNA Library\" # should have \"Library Stock\" object_type with associated \"length\"\n                    stock=find(:item,\n                                object_type: { name: \"Library Stock\" },\n                                sample: { name: op.output(FRAGMENT).sample.name }\n                                ).first\n                    if(!stock.nil?)\n                        op.temporary[:length] = stock.get(:length)\n                    end\n                end\n            end\n        }\n\n        # ask tech to enter missing lengths\n        length_unknown=operations.select{|op| op.temporary[:length].nil?}\n        if(length_unknown.any?)\n            # get lengths for all samples for which length is not defined - ideally this should not be needed!!!\n            show do\n                title \"Enter the expected lengths in bp for these samples:\"\n                note \"Ask a lab manager if you do not know\"\n                table length_unknown.start_table\n                    .custom_column(heading: \"Sample Name\", checkable: true) { |op| op.input(FRAGMENT).sample.name }\n                    .get(:length, type: 'number', heading: \"Expected length (bp)\")\n                    .end_table\n            end\n        end\n\n        grouped_by_gel = operations.group_by { |op| op.input(FRAGMENT).collection }\n\n        grouped_by_gel.each do |gel, grouped_ops|\n            grouped_ops.extend(OperationList)\n            # gel image names\n            grouped_ops.each do |op|\n                op.temporary[:image_name] = \"gel_#{gel.id}\"\n            end\n            \n            # ---------------------------------------------IMAGE \n            show do\n                title \"Image gel #{gel.id}\"\n                check \"Clean the transilluminator with ethanol.\"\n                check \"Put the gel #{gel} on the transilluminator.\"\n                check \"Turn off the room lights before turning on the transilluminator.\"\n                check \"Put the camera hood on, turn on the transilluminator and take a picture using the camera control interface on computer.\"\n                check \"Check to see if the picture matches the gel before uploading.\"\n                check \"Rename the picture you just took exactly as \u003cb\u003e#{grouped_ops.first.temporary[:image_name]}\u003c/b\u003e.\"\n            end\n            \n            # ---------------------------------------------UPLOAD\n            ups = uploadData(\"/gel_#{gel.id}\", 1, TRIES) # 1 file per gel\n            image_name = grouped_ops.first.temporary[:image_name]\n            # associate to gel, plan, op \n            # can't associate to outputs yet because they are only made if lengths are verified\n            up=nil\n            if(!(ups.nil?))\n              up=ups[0]\n        \n              gel_item = Item.find(gel.id)\n        \n              # associate gel image to gel\n              gel_item.associate image_name, \"successfully imaged gel\", up\n              \n              grouped_ops.each do |op| # associate to all operations connected to gel\n                # description of where this op is in the gel, to be used as desc tag for image upload\n                location_in_gel = \"#{op.input(FRAGMENT).sample.name} is in row #{op.input(FRAGMENT).row + 1} and column #{op.input(FRAGMENT).column + 1}\"\n                \n                # associate image to op with a location description\n                op.associate image_name, location_in_gel, up\n                \n                # associate image to plan, or append new location to description if association already exists\n                existing_assoc = op.plan.get(image_name)\n                if existing_assoc \u0026\u0026 op.plan.upload(image_name) == up\n                    op.plan.modify(image_name, existing_assoc.to_s + \"\\n\" + location_in_gel, up)\n                else\n                    op.plan.associate image_name, location_in_gel , up\n                end\n              end\n            end\n            \n            # ---------------------------------------------VERIFY\n            expected_length_table = grouped_ops.start_table\n                .custom_column(heading: \"Gel ID\") { |op| op.input(FRAGMENT).item.id }\n                .custom_column(heading: \"Row\") { |op| op.input(FRAGMENT).row + 1 }\n                .custom_column(heading: \"Column\", checkable: true) { |op| op.input(FRAGMENT).column + 1 }\n                .custom_column(heading: \"Expected Length\") { |op| op.temporary[:length] }\n                .get(:correct, heading: \"Does the band match the expected length (y/n)\", type: \"string\", default: \"y\")\n                .end_table\n                \n            responses = show do\n                title \"Verify Fragment Lengths for gel #{gel.id}\"\n                table expected_length_table\n            end\n            \n            grouped_ops.each { |op|\n              if(op.temporary[:correct].upcase.start_with?(\"N\"))\n                op.error :incorrect_length, \"The fragment did not match the expected length.\"\n              end\n            }\n            \n            grouped_ops.select! { |op| op.status == \"running\"}\n            \n            grouped_ops.make\n            \n            # ---------------------------------------------CUT\n            qpcr1_ops = grouped_ops.select do |op|\n                back_wire = op.input(\"Fragment\").wires_as_dest[0]\n                back_wire \u0026\u0026 FieldValue.find(back_wire.from_id).operation \u0026\u0026 FieldValue.find(back_wire.from_id).operation.input(\"Program\") \u0026\u0026(FieldValue.find(back_wire.from_id).operation.input(\"Program\").val == \"qPCR1\")\n            end.extend(OperationList)\n            qpcr2_ops = (grouped_ops - qpcr1_ops).extend(OperationList)\n            \n            if qpcr1_ops.any?\n                show do\n                    title \"Cut Out Fragments\"\n                    note \"Take out #{grouped_ops.length} 1.5 mL tubes and label accordingly: #{grouped_ops.map { |op| \"#{op.output(FRAGMENT).item}\" }.to_sentence}\"\n                    note \"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"\n                    table qpcr1_ops.start_table \n                        .custom_column(heading: \"Gel ID\") { |op| \"#{op.input(FRAGMENT).item}\" }\n                        .custom_column(heading: \"Row\") { |op| op.input(FRAGMENT).row + 1 }\n                        .custom_column(heading: \"Column\", checkable: true) { |op| op.input(FRAGMENT).column + 1 }\n                        .custom_column(heading: \"1.5 mL Tube ID\") { |op| \"#{op.output(FRAGMENT_OUT).item}\" }\n                    .end_table\n                end\n            end\n            \n            if qpcr2_ops.any?\n                show do\n                    title \"Cut Out Fragments\"\n                    note \"Take out #{grouped_ops.length} 1.5 mL tubes and label accordingly: #{grouped_ops.map { |op| op.output(FRAGMENT).item}.to_sentence}\"\n                    note \"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"\n                    table qpcr2_ops.start_table\n                        .custom_column(heading: \"Gel ID\") { |op| op.input(FRAGMENT).item.id }\n                        .custom_column(heading: \"Row\") { |op| op.input(FRAGMENT).row + 1 }\n                        .custom_column(heading: \"Column\", checkable: true) { |op| op.input(FRAGMENT).column + 1 }\n                        .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(FRAGMENT).item.id }\n                    .end_table\n                end\n            end\n            # ---------------------------------------------WEIGHT\n            show do\n                title \"Weight Gel Slices\"\n                note \"Perform this step using the scale inside the gel room.\"\n                check \"Zero the scale with an empty 1.5 mL tube.\"\n                check \"Weigh each slice and enter the weights in the following table:\"\n                table grouped_ops.start_table\n                  .custom_column(heading: \"1.5 mL Tube ID\") { |op| \"#{op.output(FRAGMENT_OUT).item}\" }\n                  .get(:weight, type: 'number', heading: \"Weight (g)\",  default: MIN_WEIGHT)\n                  .end_table\n            end\n            \n            grouped_ops.each { |op|\n                op.output(FRAGMENT_OUT).item.associate(image_name, \"Your fragment is in row #{op.input(FRAGMENT).row + 1} and column #{op.input(FRAGMENT).column + 1}\", up) \n                op.output(FRAGMENT_OUT).item.associate(:weight, op.temporary[:weight]) \n            }\n        end\n        \n        choice = show do\n            title \"Clean Up\"\n            check \"Turn off the transilluminator.\"\n            check \"Dispose of the gel and any gel parts by placing it in the waste container. Spray the surface of the transilluminator with ethanol and wipe until dry using a paper towel.\"\n            check \"Remove the blue light goggles, clean them, and put them back where you found them.\"\n            check \"Clean up the gel box and casting tray by rinsing with water. Return them to the gel station.\"\n            check \"Dispose gloves after leaving the room.\"\n            grouped_by_gel.each do |gel, grouped_gel|\n                gel.mark_as_deleted\n            end\n            select [\"Yes\", \"No\"], var: \"choice\", label: \"Would you like to purify the gel slices immediately?\"\n        end\n        \n        operations.running.each do |op|\n            txfr_barcode(op, FRAGMENT, FRAGMENT)\n            txfr_bin(op, FRAGMENT, FRAGMENT)\n        end\n        \n        if choice[:choice] == \"Yes\"\n            show do\n                title \"Keep Gel Slices\"\n                note \"Keep the gel slices on your bench to use in the next protocol.\"\n            end\n        else\n            operations.store\n        end\n\n     \n        # operations.make\n\n        # split operationlist into ops that have originated from first pcr and those from second pcr.\n        # qpcr1_ops = operations.select do |op|\n        #     back_wire = op.input(\"Fragment\").wires_as_dest[0]\n\n        #     back_wire \u0026\u0026 FieldValue.find(back_wire.from_id).operation \u0026\u0026 FieldValue.find(back_wire.from_id).operation.input(\"Program\") \u0026\u0026 (FieldValue.find(back_wire.from_id).operation.input(\"Program\").val == \"qPCR1\")\n        # end.extend(OperationList)\n        # qpcr2_ops = (operations - qpcr1_ops).extend(OperationList)\n\n        # show do\n        #     title \"Cut Out Fragments\"\n        #     note \"Take out #{operations.length} 1.5 mL tubes and label accordingly: #{operations.collect { |op| op.output(FRAGMENT).item}.to_sentence}\"\n        #     note \"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"\n        #     image \"Actions/Gel/cut_extra_gel.jpg\"\n        #     table qpcr1_ops.start_table\n        #     .custom_column(heading: \"Gel ID\") { |op| op.input(FRAGMENT).item.id }\n        #     .custom_column(heading: \"Row\") { |op| op.input(FRAGMENT).row + 1 }\n        #     .custom_column(heading: \"Column\", checkable: true) { |op| op.input(FRAGMENT).column + 1 }\n        #     .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(FRAGMENT).item.id }\n        #     .end_table\n        # end if qpcr1_ops.any?\n\n        # show do\n        #     title \"Cut Out Fragments\"\n        #     note \"Take out #{operations.length} 1.5 mL tubes and label accordingly: #{operations.collect { |op| op.output(FRAGMENT).item}.to_sentence}\"\n        #     note \"Now, cut out the bands and place them into the 1.5 mL tubes according to the following table:\"\n        #     table qpcr2_ops.start_table\n        #     .custom_column(heading: \"Gel ID\") { |op| op.input(FRAGMENT).item.id }\n        #     .custom_column(heading: \"Row\") { |op| op.input(FRAGMENT).row + 1 }\n        #     .custom_column(heading: \"Column\", checkable: true) { |op| op.input(FRAGMENT).column + 1 }\n        #     .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(FRAGMENT).item.id }\n        #     .end_table\n        # end if qpcr2_ops.any?\n\n        # min_weight = 0.0\n        # max_weight = 10.0\n\n        # gel_slice_table = operations.start_table\n        #     .custom_column(heading: \"1.5 mL Tube ID\") { |op| op.output(FRAGMENT).item.id }\n        #     .get(:weight, type: 'number', heading: \"Weight (g)\")\n        #     .end_table\n\n        # show do\n        #     title \"Weight Gel Slices\"\n        #     note \"Perform this step using the scale inside the gel room.\"\n        #     check \"Zero the scale with an empty 1.5 mL tube.\"\n        #     check \"Weigh each slice and enter the weights in the following table:\"\n        #     table gel_slice_table\n        # end\n\n        # gels = operations.collect{ |op| op.input(FRAGMENT).item }.uniq\n        # choice = show do\n        #     title \"Clean Up\"\n        #     check \"Turn off the transilluminator.\"\n        #     check \"Dispose of the gel and any gel parts by placing it in the waste container. Spray the surface of the transilluminator with ethanol and wipe until dry using a paper towel.\"\n        #     check \"Remove the blue light goggles, clean them, and put them back where you found them.\"\n        #     check \"Clean up the gel box and casting tray by rinsing with water. Return them to the gel station.\"\n        #     check \"Dispose gloves after leaving the room.\"\n        #     gels.each do |g|\n        #         g.mark_as_deleted\n        #     end\n        #     select [\"Yes\", \"No\"], var: \"choice\", label: \"Would you like to purify the gel slices immediately?\"\n        # end\n\n        # if choice[:choice] == \"Yes\"\n        #     show do\n        #         title \"Keep Gel Slices\"\n        #         note \"Keep the gel slices on your bench to use in the next protocol.\"\n        #     end\n        # else\n        #     operations.store\n        # end\n\n        # # associate gel image, fragment lane with fragment and weight with the gel slices\n        # operations.each { |op|\n        #     i = op.input(FRAGMENT)\n        #     o = op.output(FRAGMENT).item\n        #     o.associate(:gel_image, \"Your fragment is in row #{i.row + 1} and column #{i.column + 1}\", op.temporary[:upload]) if o\n        #     o.associate(:weight, op.temporary[:weight]) if o\n        #     op.associate(:gel_image, \"Your fragment is in row #{i.row + 1} and column #{i.column + 1}\", op.temporary[:upload])\n        #     op.plan.associate :choice, choice[:choice]\n        # }\n\n        # operations.running.each do |op|\n        #     txfr_barcode(op, FRAGMENT, FRAGMENT)\n        #     txfr_bin(op, FRAGMENT, FRAGMENT)\n        # end\n\n        # get_protocol_feedback\n\n        # if debug\n        #     display_barcode_associations(operations: operations, in_handle: FRAGMENT)\n        # end\n\n        return {}\n\n    end\n\n    #---------------------------------------------------------------\n\n    def ask_for_uploads\n        # Request technician for uploads\n        # TODO: Ugly. Re-write this as some kind of \"Upload Manager\" convention?\n        counter = 0\n        ready = false\n        msgs = []\n        while counter \u003c 5 and not ready\n            counter += 1\n            msgs.uniq!\n            show do\n                title \"Upload all gel images\"\n                if msgs.any?\n                    warning \"Some images are missing. Make sure the images are named correctly and you've uploaded all of the images\"\n                    msgs.each do |msg|\n                        warning msg if msg\n                    end\n                end\n                upload var: \"my_gel_pic\"\n\n                t = Table.new\n                t.add_column(\"Gel Row/Col\", operations.map { |op|\n                    f = op.input(FRAGMENT)\n                    \"#{f.row + 1} #{f.column + 1}\"\n                })\n                t.add_column(\"Image name\", operations.map { |op| op.temporary[:image_name] } )\n                t.add_column(\"Uploaded?\", operations.map { |op|\n                    x = \"No\"\n                    x = \"Yes (\\\"#{op.temporary[:image_name]}\\\")\" if op.temporary[:uploaded]\n                    x\n                    } )\n                table t\n            end\n\n            op_to_file_hash = match_upload_to_operations operations, :image_name, job_id=self.jid\n            op_to_file_hash.each do |op, u|\n                op.temporary[:upload] = u\n            end\n\n            ready = true\n            operations.each do |op|\n                if op.temporary[:upload].nil?\n                    msgs \u003c\u003c \"    Gel image \u003cb\u003e\\\"#{op.temporary[:image_name]}\\\"\u003c/b\u003e not uploaded!\"\n                    ready = false\n                end\n            end\n\n            if counter \u003e 5\n                ready = true\n            end\n\n            if debug and counter \u003e 1\n                ready = true\n            end\n        end\n    end\n\n    # method that matches uploads to operations with a temporary[filename_key]\n    def match_upload_to_operations ops, filename_key, job_id=nil, uploads=nil\n        def extract_basename filename\n            ext = File.extname(filename)\n            basename = File.basename(filename, ext)\n        end\n\n        op_to_upload_hash = Hash.new\n        uploads ||= Upload.where(\"job_id\"=\u003ejob_id).to_a if job_id\n            if uploads\n                ops.each do |op|\n                    upload = uploads.select do |u|\n                        basename = extract_basename(u[:upload_file_name])\n                        op.temporary[filename_key].strip == basename.strip\n                    end.first || nil\n                    op_to_upload_hash[op] = upload\n                end\n            end\n        op_to_upload_hash\n    end\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 2.08, materials: 0.20 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[],"object_types":[{"id":785,"name":"50 mL Agarose Gel in Gel Box","description":"Used to run gels","min":0,"max":100,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-22T15:41:23.000-07:00","updated_at":"2018-05-22T15:49:37.000-07:00","unit":"box","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"","rows":2,"columns":6,"sample_type_name":null}],"operation_type":{"name":"Pour Gels","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"string","role":"input","name":"Gel Type","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"regular,low-melting"},{"ftype":"number","role":"input","name":"Percentage","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"0.8,2.0"},{"ftype":"sample","role":"output","name":"Gel (array)","sample_types":[null],"object_types":["50 mL Agarose Gel in Gel Box"],"part":true,"array":false,"routing":"G","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# SG\n# this version is for advanced prep of multiple gels.\n# array output length determines how many of the indicated (type,percentage) gels will be poured.\n# all info regarding ladders is in \"Run Pre-poured Gel\" protocol.\nneeds \"Standard Libs/SortHelper\" # for sorting ops by media/container\n\nclass Protocol\n\n    include SortHelper  \n  \n    # I/O\n    PERCENTAGE=\"Percentage\"\n    TYPE=\"Gel Type\"\n    GEL=\"Gel (array)\"\n  \n    # params\n    GEL_VOL={qty: 50.0, units: \"mL\"}  \n    GEL_GREEN={name: \"Gel Green\",qty: 5.0, units: \"µL\"}   \n    TAE={name: \"1xTAE\", qty: 50, units: \"mL\"}\n    COMB_TYPE=\"thick\" # \"thick\" or \"thin\"\n    MICROWAVE_TIME={qty: 30, units: \"sec\"} \n    GEL_LOCATION=\"Gel Room\"\n    GEL_COLLECTION=\"50 mL Agarose Gel in Gel Box\" # collection object used for outputs\n    AGAROSE=\"Agarose Gel\" # sample with which empty gel is populated so that it will appear in inventory\n  \n    def main\n    \n        # sort ops by gel type, percentage\n        ops_sorted = sortByMultipleIO(operations, [\"in\",\"in\"], [TYPE,PERCENTAGE], [\"\",\"\"], [\"val\",\"val\"]) \n        operations = ops_sorted\n        # NO MAKE! need to produce new collection(s)\n        \n        # get sample ID of agarose gel\n        sid = Sample.find_by_name(AGAROSE).id\n        show { note \"sid=#{sid}\" } if debug\n        # make collections and populate collections with \"Agarose Gel\" BEFORE labeling gels\n        operations.each { |op|\n            op.output_array(GEL).each { |out|        \n                object_type = ObjectType.find_by_name(GEL_COLLECTION)\n                new_item = produce new_collection object_type.name \n                new_item.matrix = Array.new(object_type.rows) { Array.new(object_type.columns) { sid } }\n                new_item.save\n                out.set item: new_item\n                # associate gel type, percentage, location\n                out.item.associate :percentage, op.input(PERCENTAGE).val\n                out.item.associate :type, op.input(TYPE).val \n                out.item.location=GEL_LOCATION\n            }\n        }\n        \n        # display how many gels will be made today\n        tot_gels=0\n        tab=[]\n        tab[0]=[\"Gel Percentage\",\"Agarose Type\",\"Number of Gels\"]\n        gel_hash = group_ops_by_gel(operations)\n        gel_hash.each_with_index { |(gel,ops),i|\n            num_gels = ops.map { |op| op.output_array(GEL).length }.sum\n            tab[i+1]=[\"#{gel[0].round(1)}\",gel[1],num_gels]\n            tot_gels=tot_gels+num_gels\n        }\n        show {\n            title \"You will prepare the following #{tot_gels} gels\"\n            table tab\n        }\n        \n        # loop over seperate \"pour gel\"s\n        operations.each { |op|\n            op.output_array(GEL).collections.each_with_index { |it,i|\n                mass = ( ((op.input(PERCENTAGE).val.to_f)/100) * GEL_VOL[:qty]).round(2) # g\n                error = ( mass * 0.05 ).round(5) # allowed error in g is +/- 5%\n                add_combs(i+1,tot_gels)\n                pour_gel(mass,error,op.input(TYPE).val,i+1,tot_gels)\n                add_gel_green(i+1,tot_gels)\n                label_gel(it,op.input(TYPE).val,op.input(PERCENTAGE).val,i+1,tot_gels)\n            }\n        }\n        \n        return {}\n     \n    end\n    \n    #-----------------------------------------------------------------------------------------------------------\n    \n    # group operations by gel [percentage, type]\n    def group_ops_by_gel(ops)\n        gel_types=ops.map { |op| [op.input(PERCENTAGE).val.to_f, op.input(TYPE).val] }.uniq\n        show { note \"gel_types=#{gel_types}\" } if debug\n        ops_hash = Hash.new()\n        gel_types.each { |m|\n            ops_match = ops.select { |op| [op.input(PERCENTAGE).val.to_f, op.input(TYPE).val] == m } \n            ops_hash[m] = ops_match \n        }\n        ops_hash\n    end \n    \n    # pour gel\n    def pour_gel(mass,error,type,i,tot)\n        show do\n            title \"Pour gel (#{i} of #{tot})\"\n            check \"Grab a flask from on top of the microwave M2.\"\n            check \"Get a graduated cylinder from on top of the microwave. Measure and add \u003cb\u003e#{TAE[:qty]} #{TAE[:units]}\u003c/b\u003e of #{TAE[:name]} from jug J2 to the flask.\"\n            check \"Using a digital scale, measure out \u003cb\u003e#{mass} g\u003c/b\u003e (+/- #{error} g) of \u003cb\u003e#{type}\u003c/b\u003e agarose powder and add it to the flask.\"\n            if(type==\"low melting\")\n                note \"Low-melting agarose is located in the cabinet above the microwave.\"\n            end\n            check \"Microwave \u003cb\u003e#{MICROWAVE_TIME[:qty]} #{MICROWAVE_TIME[:units]}\u003c/b\u003e on high in microwave M2, then swirl. The agarose should now be in solution.\"\n            note \"If it is not in solution, microwave 7 seconds on high, then swirl. Repeat until dissolved.\"\n            warning \"Work in the gel room, wear gloves and eye protection all the time\"\n        end\n    end\n    \n    def add_gel_green(i,tot)\n        show do\n            title \"Add #{GEL_GREEN[:name]} (#{i} of #{tot})\"  \n            note \"Using a 10 µL pipetter, take up \u003cb\u003e#{GEL_GREEN[:qty]*(GEL_VOL[:qty]/50.0)} #{GEL_GREEN[:units]}\u003c/b\u003e of #{GEL_GREEN[:name]} into the pipet tip. Expel the #{GEL_GREEN[:name]} directly into the molten agar (under the surface), then swirl to mix.\"\n            warning \"#{GEL_GREEN[:name]} is supposedly safe, but stains DNA and can transit cell membranes (limit your exposure).\"\n            warning \"#{GEL_GREEN[:name]} is photolabile. Limit its exposure to light by putting it back in the box.\"\n        end\n    end\n    \n    def add_combs(i,tot)\n        show do\n            title \"Add combs (#{i} of #{tot})\"\n            check \"Go get a 49 mL Gel Box With Casting Tray (clean)\"\n            check \"Retrieve 2 \u003cb\u003e6-well\u003c/b\u003e purple combs from A7.325\"\n            check \"Position the gel box with the electrodes facing away from you.\"\n            check \"Add a purple comb to the side of the casting tray nearest the side of the gel box.\"\n            check \"Put the \u003cb\u003e#{COMB_TYPE}\u003c/b\u003e side of the comb down.\"\n            check \"Add another purple comb to the center of the casting tray.\"\n            check \"Put the \u003cb\u003e#{COMB_TYPE}\u003c/b\u003e side of the comb down.\"\n            note \"Make sure that both combs are well-situated in their grooves of the casting tray.\"\n        end\n    end\n    \n    def label_gel(gel_item,type,percentage,i,tot)\n        show do\n            title \"Pour and label the gel (#{i} of #{tot})\"\n            note \"Using a gel pouring autoclave glove, pour agarose from one flask into the casting tray. \n                          Pour slowly and in a corner for best results. Pop any bubbles with a 10 µL pipet tip.\"\n            note \"Write \u003cb\u003e#{gel_item}\u003c/b\u003e + \u003cb\u003e#{percentage}% #{type}\u003c/b\u003e + \u003cb\u003e#{Time.zone.now.to_date}\u003c/b\u003e on piece of lab tape and affix it to the side of the gel box.\"\n                note \"Leave the gel at location A7.325 to solidify.\"\n        end\n    end\n    \nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 10.70, materials: 5.81 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":11,"parent_id":4,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":12,"parent_id":4,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":13,"parent_id":4,"name":"Template","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2,"field_type_id":13,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":3,"field_type_id":13,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":4,"field_type_id":13,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":5,"field_type_id":13,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}},{"id":2547,"field_type_id":13,"sample_type_id":70,"object_type_id":null,"created_at":"2018-09-18T16:02:54.000-07:00","updated_at":"2018-09-18T16:02:54.000-07:00","sample_type":{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00"}}],"sample_types":["Plasmid","E coli strain","Fragment","Yeast Strain","DNA Library"],"object_types":[null,null,null,null,null]},{"id":14,"parent_id":4,"name":"Forward Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":6,"field_type_id":14,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2664,"field_type_id":14,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":15,"parent_id":4,"name":"Reverse Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":7,"field_type_id":15,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2665,"field_type_id":15,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":16,"parent_id":4,"name":"Restriction Enzyme(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":17,"parent_id":4,"name":"Yeast Marker","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6423,"parent_id":4,"name":"Fragment Mix Array","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-24T11:05:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2667,"field_type_id":6423,"sample_type_id":1,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2668,"field_type_id":6423,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]}]},{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":4,"parent_id":2,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:30:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5,"parent_id":2,"name":"Sequence Verification","ftype":"url","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6,"parent_id":2,"name":"Bacterial Marker","ftype":"string","choices":"Amp,Kan,Amp + Kan,Spec,Kan + Spec,Chlor,Tet,NA,Other","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-12-27T11:26:31.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7,"parent_id":2,"name":"Yeast Marker","ftype":"string","choices":"HIS,TRP,URA,LEU,NatMX,KanMX,HygMX,BleoMX,5FOA,NA,Other","array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-02-13T10:49:58.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":27,"field_type_id":7,"sample_type_id":1,"object_type_id":null,"created_at":"2017-02-13T10:49:58.000-08:00","updated_at":"2017-02-13T10:49:58.000-08:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":8,"parent_id":2,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":42,"parent_id":2,"name":"Sequencing Primers","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":26,"field_type_id":42,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":46,"parent_id":2,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":29,"field_type_id":46,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":47,"parent_id":2,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":30,"field_type_id":47,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":48,"parent_id":2,"name":"QC_length","ftype":"number","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5816,"parent_id":2,"name":"Transformation Temperature","ftype":"number","choices":"37,30","array":false,"required":false,"created_at":"2018-09-17T15:02:22.000-07:00","updated_at":"2018-11-06T11:31:23.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":16203,"parent_id":2,"name":"Comp Cells","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":3108,"field_type_id":16203,"sample_type_id":3,"object_type_id":null,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":10,"parent_id":3,"name":"Parent","ftype":"sample","choices":null,"array":null,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1,"field_type_id":10,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00","field_types":[{"id":18,"parent_id":5,"name":"Parent","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-25T08:43:19.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":8,"field_type_id":18,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]},{"id":19,"parent_id":5,"name":"Integrant","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":9,"field_type_id":19,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":10,"field_type_id":19,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid","Fragment"],"object_types":[null,null]},{"id":20,"parent_id":5,"name":"Plasmid","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":11,"field_type_id":20,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid"],"object_types":[null]},{"id":21,"parent_id":5,"name":"Integrated Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":22,"parent_id":5,"name":"Plasmid Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":23,"parent_id":5,"name":"Mating Type","ftype":"string","choices":"MATa,MATalpha,Diploid","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-10T09:05:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":24,"parent_id":5,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":12,"field_type_id":24,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":25,"parent_id":5,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":13,"field_type_id":25,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":43,"parent_id":5,"name":"QC_length","ftype":"number","choices":"","array":false,"required":false,"created_at":"2016-05-20T14:29:39.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":44,"parent_id":5,"name":"Comp_cell_limit","ftype":"string","choices":"Yes,No","array":false,"required":false,"created_at":"2016-05-20T14:35:37.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":83,"parent_id":5,"name":"Media","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2017-07-12T19:25:25.000-07:00","updated_at":"2017-07-12T19:25:25.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":954,"parent_id":5,"name":"Has this strain passed QC?","ftype":"string","choices":"No,Yes","array":false,"required":false,"created_at":"2017-10-31T11:39:27.000-07:00","updated_at":"2017-10-31T20:14:46.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6455,"parent_id":5,"name":"Haploids","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2669,"field_type_id":6455,"sample_type_id":5,"object_type_id":null,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]}]},{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":292,"name":"Gel Slice","description":"Gel Slice cut from a gel lane after gel was run. Often placed in a 1.5 mL tube.","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2014-01-10T15:30:06.000-08:00","updated_at":"2014-01-14T15:24:23.000-08:00","unit":"Fragment","cost":10.0,"release_method":"dispose","release_description":"","sample_type_id":4,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Fragment"},{"id":784,"name":"Library Gel Slice","description":"Multiple dsDNA fragments in a gel slice ","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-03T10:34:24.000-07:00","updated_at":"2018-05-03T10:34:24.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":295,"name":"Fragment Stock","description":"Fragment stock in 1.5 mL tube, usually stored in M20 fridge.","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2014-01-12T16:12:01.000-08:00","updated_at":"2014-01-12T16:12:01.000-08:00","unit":"Fragment","cost":50.0,"release_method":"return","release_description":"","sample_type_id":4,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Fragment"},{"id":760,"name":"Illuminated Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences and adapters for Illumina sequencing","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-14T09:22:33.000-07:00","updated_at":"2018-03-14T09:22:33.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":779,"name":"Amplified Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences (before addition of adapters for Illumina sequencing)","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-16T09:18:54.000-07:00","updated_at":"2018-04-16T09:18:54.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":782,"name":"Library Stock","description":"A library of multiple ssDNA variants","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-25T13:28:12.000-07:00","updated_at":"2018-06-06T09:50:52.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Purify Gel Slice (NGS)","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Gel","sample_types":["Fragment","DNA Library"],"object_types":["Gel Slice","Library Gel Slice"],"part":false,"array":false,"routing":"G","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Fragment","sample_types":["Fragment","DNA Library","DNA Library","DNA Library"],"object_types":["Fragment Stock","Illuminated Fragment Library","Amplified Fragment Library","Library Stock"],"part":false,"array":false,"routing":"G","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# Purify Gel Protocol\n\n# This protocol purfies gel slices into DNA fragment stocks\nneeds \"Library Cloning/PurificationHelper\"\nneeds \"Standard Libs/PrinterHelper\"\nneeds \"Standard Libs/Feedback\"\nneeds \"Next Gen Prep/NextGenPrepHelper\"\n\nclass Protocol\n\n    include PurificationHelper, NextGenPrepHelper\n    include PrinterHelper\n    include Feedback\n\n    # I/O\n    FRAGMENT=\"Fragment\"\n    GEL=\"Gel\"\n    KIT=\"QiagenPink\" #\"Promega\" # \"Qiagen\" or \"Promega\". must match a key in KIT_SETTINGS hash in Library Cloning/PurificationHelper.\n\n    # other\n    LIB_CONTAINER=\"Library Gel Slice\"\n\n    def main\n        associate_random_barcodes(operations: operations, in_handle: GEL) if debug\n\n        if debug\n           operations.shuffle!\n        end\n\n        keep_gel_slices = operations.first.plan.get(:choice) == \"Yes\"\n\n        # use only \"approved\" slices, sort by increasing item id\n        operations.retrieve interactive: keep_gel_slices\n        operations.sort! { |op1, op2| op1.input(GEL).item.id \u003c=\u003e op2.input(GEL).item.id }\n        operations.make\n\n        heatElutionBuffer(GEL,KIT)\n\n        volumeSetup(GEL,KIT)\n\n        addLoadingBuffer(GEL, KIT)\n\n        meltGel(GEL,KIT)\n\n        loadSample(GEL,KIT)\n\n        washSample(KIT)\n\n        printLabels(FRAGMENT)\n\n        eluteSample(FRAGMENT, KIT, 1) # ==1 for two rounds of elution\n\n        # Library Gel Slice concentrations will be measured by Qubit, so don't waste material here\n        ops=operations.select { |op| !(op.input(GEL).item.object_type.name == LIB_CONTAINER) }\n\n        # measureConcentration(FRAGMENT,\"output\",ops)\n\n        # saveOrDiscard(FRAGMENT,ops)\n\n        operations.running.each do |op|\n            txfr_barcode(op, GEL, FRAGMENT)\n            txfr_bin(op, GEL, FRAGMENT)\n        end\n\n        operations.running.each { |op| op.input(GEL).item.mark_as_deleted }\n        operations.store\n\n        get_protocol_feedback\n\n        if debug\n            display_barcode_associations(\n                operations: operations,\n                in_handle: GEL,\n                out_handle: FRAGMENT\n            )\n        end\n\n        return {}\n\n    end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 6.33, materials: 1.89 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":760,"name":"Illuminated Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences and adapters for Illumina sequencing","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-14T09:22:33.000-07:00","updated_at":"2018-03-14T09:22:33.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Qubit concentration","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"qPCR sample in","sample_types":["DNA Library"],"object_types":["Illuminated Fragment Library"],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":1351,"choices":null},{"ftype":"sample","role":"output","name":"qPCR sample out","sample_types":["DNA Library"],"object_types":["Illuminated Fragment Library"],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# SG\n# \n# measure sample concentration using Qubit before NGS run\nneeds \"Standard Libs/SortHelper\"\nclass Protocol\n\n    include SortHelper\n\n    # I/O\n    IN=\"qPCR sample in\"\n    OUT=\"qPCR sample out\"\n    \n    # other\n    LAB=\"Biofab\" # name of lab where Qubit is located\n    BIOFAB=\"Biofab\"\n    Q_HS_BUFFER=\"Qubit 1x dsDNA HS Working Solution\"\n    NUM_STANDARDS=2\n    Q_STANDARD_1=\"Qubit dsDNA HS Standard #1\"\n    Q_STANDARD_2=\"Qubit dsDNA HS Standard #2\" \n    STANDARD_LOCATION=\"Media fridge\"\n    Q_TUBES=\"Qubit assay tube\"\n    STANDARD_VOL=10 #µL\n    STANDARD_BUFFER_VOL=200-STANDARD_VOL #µL\n    SAMPLE_VOL=2 #µL\n    SAMPLE_BUFFER_VOL=200-SAMPLE_VOL #µL\n    Q_ASSAY=\"dsDNA\"\n    Q_UNITS=\"ng/µL\"\n    \n    def main\n        \n        operations.retrieve\n        # NO MAKE - we are just passing\n        \n        # sort so that input ids and sample labels are in consecutive order\n        ops = sortByMultipleIO(operations, [\"in\"], [IN], [\"id\"], [\"item\"])\n        operations = ops\n        \n        # get more stuff\n        show {\n            title \"Grab the following items\"\n            note \"All items are located in #{STANDARD_LOCATION}\"\n            check \"\u003cb\u003e#{Q_HS_BUFFER}\u003c/b\u003e\"\n            check \"\u003cb\u003e#{Q_STANDARD_1}\u003c/b\u003e\"\n            check \"\u003cb\u003e#{Q_STANDARD_2}\u003c/b\u003e\"\n        }\n        \n        # prep standards\n        show {\n            title \"Prepare standards\"\n            warning \"In the following, make sure you are using #{Q_TUBES}s\"\n            warning \"Label \u003cb\u003elids\u003c/b\u003e only\"\n            check \"Grab #{NUM_STANDARDS} #{Q_TUBES}s, label their \u003cb\u003elids\u003c/b\u003e \u003cb\u003eS1\u003c/b\u003e and \u003cb\u003eS2\u003c/b\u003e\"\n            check \"Add \u003cb\u003e#{STANDARD_BUFFER_VOL} µL\u003c/b\u003e of \u003cb\u003e#{Q_HS_BUFFER}\u003c/b\u003e to each of \u003cb\u003eS1\u003c/b\u003e, \u003cb\u003eS2\u003c/b\u003e\"\n            check \"Add \u003cb\u003e#{STANDARD_VOL} µL\u003c/b\u003e of #{Q_STANDARD_1} to \u003cb\u003eS1\u003c/b\u003e\"\n            check \"Add \u003cb\u003e#{STANDARD_VOL} µL\u003c/b\u003e of #{Q_STANDARD_2} to \u003cb\u003eS2\u003c/b\u003e\"\n        }\n        \n        # vortex and spin \n        show {\n            title \"Vortex and spin samples\"\n            check \"Vortex and spin samples #{operations.map{|op| op.input(IN).item}.to_sentence } to mix contents thoroughly\"   \n        }\n        \n        # prep samples\n        show {\n            title \"Prepare samples\"\n            warning \"In the following, make sure you are using #{Q_TUBES}s\"\n            warning \"Label \u003cb\u003elids\u003c/b\u003e only\"\n            check \"Grab #{operations.length} #{Q_TUBES}(s), label their \u003cb\u003elids\u003c/b\u003e \u003cb\u003eD1\u003c/b\u003e to \u003cb\u003eD#{operations.length}\u003c/b\u003e\"\n            note \"Prepare the following diluted samples:\"\n            table operations.start_table\n                .custom_column(heading: \"Dilute sample\") { |op| \"D#{operations.index(op) + 1}\" }\n                .custom_column(heading: \"#{Q_HS_BUFFER} (µL)\") { |op| SAMPLE_BUFFER_VOL }\n                .input_item(IN)\n                .custom_column(heading: \"Sample volume (µL)\") { |op| SAMPLE_VOL }\n                .end_table\n            check \"Vortex diluted samples to mix contents thoroughly\"   \n            check \"Incubate at room temperature for 2 minutes\"\n            if(LAB==BIOFAB)\n                timer initial: { hours: 0, minutes: 2, seconds: 0}\n            else\n                note \"In the meantime, take the standards \u003cb\u003eS1, S2\u003c/b\u003e and samples \u003cb\u003eD1-D#{operations.length}\u003c/b\u003e to the #{LAB} lab\"\n            end\n        }\n        \n        # measure on Qubit\n        show {\n            title \"Measure standards and samples on Qubit\"\n            if(LAB!=BIOFAB)\n                warning \"You will be using the #{LAB} lab's Qubit. Ask permission from someone in the lab!\"\n            end\n            check \"Turn on the machine and select the \u003cb\u003e#{Q_ASSAY}\u003c/b\u003e assay on the home screen\"\n            check \"Enter \u003cb\u003eoriginal sample volume\u003c/b\u003e: \u003cb\u003e#{SAMPLE_VOL} µL\u003c/b\u003e\"\n            check \"Enter \u003cb\u003eoutput sample units\u003c/b\u003e: \u003cb\u003e#{Q_UNITS}\u003c/b\u003e\"\n            check \"You will be prompted to measure standards \u003cb\u003eS1\u003c/b\u003e and \u003cb\u003eS2\u003c/b\u003e. Do so.\"\n            check \"Measure samples \u003cb\u003eD1\u003c/b\u003e to \u003cb\u003eD#{operations.length}\u003c/b\u003e. Enter the results into the following table:\"\n            table operations.start_table\n                .custom_column(heading: \"Dilute sample\") { |op| \"D#{operations.index(op) + 1}\" }\n                .input_item(IN) \n                .get(:concentration, type: \"number\", heading: \"Concentration (#{Q_UNITS})\", default: 1.0)\n                .end_table\n        }\n         \n        operations.each { |op|\n            op.input(IN).item.associate :concentration, op.temporary[:concentration]\n            op.pass(IN,OUT)\n        }\n        \n        # get more stuff\n        show {\n            title \"Return the following items to #{STANDARD_LOCATION}\"\n            check \"\u003cb\u003e#{Q_HS_BUFFER}\u003c/b\u003e\"\n            check \"\u003cb\u003e#{Q_STANDARD_1}\u003c/b\u003e\"\n            check \"\u003cb\u003e#{Q_STANDARD_2}\u003c/b\u003e\"\n        }\n        \n        operations().store\n        \n    end # main\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 4.2, materials: 1.04 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":11,"parent_id":4,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":12,"parent_id":4,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":13,"parent_id":4,"name":"Template","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2,"field_type_id":13,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":3,"field_type_id":13,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":4,"field_type_id":13,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":5,"field_type_id":13,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}},{"id":2547,"field_type_id":13,"sample_type_id":70,"object_type_id":null,"created_at":"2018-09-18T16:02:54.000-07:00","updated_at":"2018-09-18T16:02:54.000-07:00","sample_type":{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00"}}],"sample_types":["Plasmid","E coli strain","Fragment","Yeast Strain","DNA Library"],"object_types":[null,null,null,null,null]},{"id":14,"parent_id":4,"name":"Forward Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":6,"field_type_id":14,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2664,"field_type_id":14,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":15,"parent_id":4,"name":"Reverse Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":7,"field_type_id":15,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2665,"field_type_id":15,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":16,"parent_id":4,"name":"Restriction Enzyme(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":17,"parent_id":4,"name":"Yeast Marker","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6423,"parent_id":4,"name":"Fragment Mix Array","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-24T11:05:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2667,"field_type_id":6423,"sample_type_id":1,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2668,"field_type_id":6423,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]}]},{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":4,"parent_id":2,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:30:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5,"parent_id":2,"name":"Sequence Verification","ftype":"url","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6,"parent_id":2,"name":"Bacterial Marker","ftype":"string","choices":"Amp,Kan,Amp + Kan,Spec,Kan + Spec,Chlor,Tet,NA,Other","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-12-27T11:26:31.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7,"parent_id":2,"name":"Yeast Marker","ftype":"string","choices":"HIS,TRP,URA,LEU,NatMX,KanMX,HygMX,BleoMX,5FOA,NA,Other","array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-02-13T10:49:58.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":27,"field_type_id":7,"sample_type_id":1,"object_type_id":null,"created_at":"2017-02-13T10:49:58.000-08:00","updated_at":"2017-02-13T10:49:58.000-08:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":8,"parent_id":2,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":42,"parent_id":2,"name":"Sequencing Primers","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":26,"field_type_id":42,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":46,"parent_id":2,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":29,"field_type_id":46,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":47,"parent_id":2,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":30,"field_type_id":47,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":48,"parent_id":2,"name":"QC_length","ftype":"number","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5816,"parent_id":2,"name":"Transformation Temperature","ftype":"number","choices":"37,30","array":false,"required":false,"created_at":"2018-09-17T15:02:22.000-07:00","updated_at":"2018-11-06T11:31:23.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":16203,"parent_id":2,"name":"Comp Cells","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":3108,"field_type_id":16203,"sample_type_id":3,"object_type_id":null,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":10,"parent_id":3,"name":"Parent","ftype":"sample","choices":null,"array":null,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1,"field_type_id":10,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00","field_types":[{"id":18,"parent_id":5,"name":"Parent","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-25T08:43:19.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":8,"field_type_id":18,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]},{"id":19,"parent_id":5,"name":"Integrant","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":9,"field_type_id":19,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":10,"field_type_id":19,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid","Fragment"],"object_types":[null,null]},{"id":20,"parent_id":5,"name":"Plasmid","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":11,"field_type_id":20,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid"],"object_types":[null]},{"id":21,"parent_id":5,"name":"Integrated Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":22,"parent_id":5,"name":"Plasmid Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":23,"parent_id":5,"name":"Mating Type","ftype":"string","choices":"MATa,MATalpha,Diploid","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-10T09:05:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":24,"parent_id":5,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":12,"field_type_id":24,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":25,"parent_id":5,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":13,"field_type_id":25,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":43,"parent_id":5,"name":"QC_length","ftype":"number","choices":"","array":false,"required":false,"created_at":"2016-05-20T14:29:39.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":44,"parent_id":5,"name":"Comp_cell_limit","ftype":"string","choices":"Yes,No","array":false,"required":false,"created_at":"2016-05-20T14:35:37.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":83,"parent_id":5,"name":"Media","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2017-07-12T19:25:25.000-07:00","updated_at":"2017-07-12T19:25:25.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":954,"parent_id":5,"name":"Has this strain passed QC?","ftype":"string","choices":"No,Yes","array":false,"required":false,"created_at":"2017-10-31T11:39:27.000-07:00","updated_at":"2017-10-31T20:14:46.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6455,"parent_id":5,"name":"Haploids","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2669,"field_type_id":6455,"sample_type_id":5,"object_type_id":null,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]}]}],"object_types":[{"id":755,"name":"96 qPCR collection","description":"contains up to 96 samples in qPCR stripwells or qPCR plate","min":0,"max":1000,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-02-09T08:42:28.000-08:00","updated_at":"2018-05-22T15:33:46.000-07:00","unit":"plate","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"Bench","rows":8,"columns":12,"sample_type_name":null},{"id":785,"name":"50 mL Agarose Gel in Gel Box","description":"Used to run gels","min":0,"max":100,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-22T15:41:23.000-07:00","updated_at":"2018-05-22T15:49:37.000-07:00","unit":"box","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"","rows":2,"columns":6,"sample_type_name":null}],"operation_type":{"name":"Run Pre-poured Gel","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Fragment","sample_types":["DNA Library"],"object_types":["96 qPCR collection"],"part":true,"array":false,"routing":"F","preferred_operation_type_id":330,"preferred_field_type_id":3754,"choices":null},{"ftype":"sample","role":"output","name":"Fragment","sample_types":["DNA Library","Fragment"],"object_types":["50 mL Agarose Gel in Gel Box","50 mL Agarose Gel in Gel Box"],"part":true,"array":false,"routing":"F","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Gel Type","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"regular,low-melting"},{"ftype":"number","role":"input","name":"Percentage","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"0.8,2.0"}],"protocol":"# SG\n# this version for pre-poured gel\n#\n# gel type and percentage are associated with gel (collection)\n# empty lanes depend on percentage:\n#   0.8% - 2 empty lanes in each row (1kb and 100bp ladders)\n#   2.0% - 1 empty lane  (100bp ladder)\n#\nneeds \"Standard Libs/Feedback\"\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/Units\"\nneeds \"Collection Models/DNAGel\"\nneeds \"Next Gen Prep/NextGenPrepHelper\"\nneeds \"Tissue Culture Libs/CollectionDisplay\"\n\nclass Protocol\n\n    include Feedback, Debug, Units, NextGenPrepHelper, CollectionDisplay\n\n    # I/O\n    FRAGMENT = \"Fragment\" # input and output\n    TYPE = \"Gel Type\"\n    PERCENTAGE = \"Percentage\"\n\n    # other\n    LADDER_100BP = \"100 bp Ladder\"\n    LADDER_1KB = \"1 kb Ladder\"\n    LOADING_DYE = \"6X Loading Dye\"\n\n    DYE_CONCENTRATION = 6\n\n    LADDER =    {qty: 10, units: MICROLITERS}\n    TOTAL =     {qty: 60, units: MICROLITERS}\n    TIME =      {qty: 40, units: MINUTES}\n    VOLTAGE =   {qty: 100, units: VOLTS}\n\n    def main\n\n        if debug\n            associate_test_volumes(operations)\n            associate_random_barcodes(operations: operations, in_handle: FRAGMENT)\n        end\n\n        provisioned_gels = provision_gels(operations, true)\n\n        ladders_and_dyes = take_ladders_dyes_and_gels(provisioned_gels: provisioned_gels)\n\n        operations_running_strict.retrieve(only: FRAGMENT)\n\n        set_up_gel_boxes\n\n        add_dye_to_samples(operations: operations_running_strict, input_handle: FRAGMENT)\n\n        add_samples(provisioned_gels: provisioned_gels)\n\n        start_electrophoresis\n\n        clean_up(operations: operations_running_strict, ladders_and_dyes: ladders_and_dyes)\n\n        operations_running_strict.each do |op|\n            txfr_barcode(op, FRAGMENT, FRAGMENT)\n            txfr_bin(op, FRAGMENT, FRAGMENT)\n        end\n\n        get_protocol_feedback\n\n        if debug\n            display_barcode_associations(operations: operations_running_strict, in_handle: FRAGMENT)\n            inspect provisioned_gels.values.flatten.map { |gel| gel.deleted? }.to_s\n            inspect operations_running_strict.map { |op| op.output(FRAGMENT).collection.deleted? }.to_s\n        end\n\n        return {}\n\n    end\n\n    def provision_gels(operations, show_debug=false)\n\n        ladder_100 = Sample.find_by_name(LADDER_100BP)\n        ladder_1k = Sample.find_by_name(LADDER_1KB)\n\n        if debug \u0026\u0026 show_debug\n            operations.shuffle!\n            debug_table(operations)\n            # return\n        end\n\n        ops_by_gel = group_ops_by_gel(operations)\n\n        if debug \u0026\u0026 show_debug\n            ops_by_gel.each do |gel_params, ops|\n                debug_table(ops, gel_params)\n            end\n            # return\n        end\n\n        provisioned_gels = {}\n        gel_table = [[\"Gel Percentage\", \"Gel Type\", \"Gel Items\"]]\n\n        ops_by_gel.each do |gel_params, ops|\n            percentage, agarose_type = gel_params\n\n            ladders = [ladder_100]\n            ladders.insert(0, ladder_1k) if percentage == '0.8'\n\n            matching_gels = DNAGel.matching_gels(agarose_type: agarose_type, percentage: percentage)\n            gel_layouts = []\n\n            while ops.any? \u0026\u0026 matching_gels.any? do\n                gel = matching_gels.shift\n                gel_layout = DNAGel.new(gel: gel)\n                gel_layout.add_ladders(samples: ladders)\n                ops = gel_layout.add_operations(operations: ops, output_handle: FRAGMENT)\n                gel_layout.mark_as_deleted\n                gel_layouts \u003c\u003c gel_layout\n            end\n\n            orphans = ops\n\n            row = [\n                percentage,\n                agarose_type,\n                gel_layouts.map { |g| g.gel.id }.sort.to_sentence,\n            ]\n\n            gel_table \u003c\u003c row\n\n            if orphans.any?\n                orphans.each { |op| op.change_status('pending') }\n\n                show do\n                    title \"Rejected Operations\"\n                    note \"The following Operations will be set back to pending because there are not enough gels\"\n                    warning \"Please notify a lab manager\"\n                    note orphans.map { |op| op.id }.sort.to_sentence\n                end\n            end\n\n            provisioned_gels[gel_params] = gel_layouts\n        end\n\n        show do\n            title \"Get Gels\"\n\n            note \"You will need the following #{DNAGel::GENERIC_GEL} Items\"\n            table gel_table\n        end\n\n        provisioned_gels\n    end\n\n    def take_ladders_dyes_and_gels(provisioned_gels:)\n        ladder_and_dye_items = []\n        gel_items = []\n        ladder_samples = []\n\n        provisioned_gels.values.each do |gel_layouts|\n            gel_layouts.each do |gel_layout|\n                ladder_samples += gel_layout.ladders\n                gel_items \u003c\u003c gel_layout.gel\n            end\n        end\n\n        ladder_and_dye_items += ladder_samples.uniq.map { |ls| ls.in(\"Ladder Aliquot\").first }\n        ladder_and_dye_items \u003c\u003c dye = Sample.find_by_name(LOADING_DYE).in(\"Screw Cap Tube\").first\n\n        take(ladder_and_dye_items, interactive: true)\n        take(gel_items, interactive: true)\n\n        ladder_and_dye_items\n    end\n\n    def set_up_gel_boxes\n        show do\n            title \"Set up the power supply\"\n            note  \"In the gel room, obtain a power supply and set it to #{qty_display(VOLTAGE)} and with a #{qty_display(TIME)} timer.\"\n            note  \"Attach the electrodes of the gel box lid(s) to the power supply.\"\n            image \"Items/gel_power_settings.JPG\"\n        end\n\n        show do\n            title \"Set up the gel box(es)\"\n\n            check \"Remove the comb(s) and put them away.\"\n            check \"Check the orientation of the gels in the gel boxes.\"\n            warning \"With the gel box(s) electrodes facing away from you, the top lane(s) should be on your left.\"\n\n            check \"Using a graduated cylinder, fill the gel box(s) with 250 #{MILLILITERS} of 1X TAE.\"\n            warning \"The TAE should just cover the center of the gel(s) and fill the wells.\"\n\n            check \"Put the graduated cylinder away.\"\n            image \"Items/gel_fill_TAE_to_line.JPG\"\n        end\n    end\n\n    def add_dye_to_samples(operations:, input_handle:)\n        ops_by_collection = operations.group_by { |op| op.input(input_handle).collection }\n\n        show do\n            title \"Add dye to samples\"\n\n            ops_by_collection.each_with_index do |(coll, ops), i|\n                if i \u003e 0\n                    note \" \"; separator; note \" \"\n                end\n\n                note \"Add the indicated volumes (in #{MICROLITERS}) of #{LOADING_DYE} to the highlighted wells in \" \\\n                        \"#{coll.object_type.name} \u003cb\u003e#{coll.id}\u003c/b\u003e\"\n\n                rcx_list = ops.map do |op|\n                    fv = op.input(input_handle)\n                    dye_volume = fv.part.get(:volume) || 50\n                    dye_volume = dye_volume.to_i / (DYE_CONCENTRATION - 1)\n                    [fv.row, fv.column, dye_volume]\n                end\n\n                table highlight_alpha_rcx(coll, rcx_list)\n            end\n        end\n    end\n\n    def add_samples(provisioned_gels:)\n        %w(ladder sample).each do |stub|\n            provisioned_gels.each do |gel_params, gel_layouts|\n                show do\n                    title \"Add #{stub}s\"\n                    gel_layouts.each_with_index do |gel_layout, i|\n                        if i \u003e 0\n                            note \" \"; separator; note \" \"\n                        end\n\n                        if stub == 'ladder'\n                            note \"Add #{qty_display(LADDER)} ladders to gel \" \\\n                                    \"\u003cb\u003e#{gel_layout.gel.id}\u003c/b\u003e as indicated:\"\n                            table gel_layout.ladder_display\n                        else\n                            note \"Transfer the entire #{qty_display(TOTAL)} of each sample to gel \" \\\n                                    \"\u003cb\u003e#{gel_layout.gel.id}\u003c/b\u003e as indicated:\"\n                            table gel_layout.sample_display(input_handle: FRAGMENT)\n                        end\n                    end\n                end\n            end\n        end\n    end\n\n    def start_electrophoresis\n        show do\n            title \"Start Electrophoresis\"\n            note \"Carefully attach the gel box lid(s) to the gel box(es).\"\n            warning \"Be careful not to bump the samples out of the wells.\"\n            note \"Attach the red electrode to the red terminal of the power supply, and the black electrode to the black terminal.\"\n            note \"Press the start button on the power supply.\"\n            note \"Make sure the power supply is not erroring (no E* messages) and that there are bubbles emerging from the wires in the bottom corners of the gel box.\"\n            image \"gel_check_for_bubbles\"\n        end\n\n        show do\n            title \"Set a timer\"\n            check \"When you get back to your bench, set a #{qty_display(TIME)} timer.\"\n            check \"When the timer is up, get a lab manager to check on the gel.\"\n            note \"The lab manager may have you set another timer after checking the gel.\"\n        end\n    end\n\n    def clean_up(operations:, ladders_and_dyes:)\n        show do\n            title \"Discard Stripwells\"\n            note \"Discard all the empty stripwells\"\n        end\n\n        release(ladders_and_dyes, interactive: true)\n\n        # delete input collection parts\n        operations.each do |op|\n            fv = op.input(FRAGMENT)\n            fv.collection.mark_as_deleted\n            fv.part.mark_as_deleted\n        end\n    end\n\n    # group operations by gel [percentage, type]\n    def group_ops_by_gel(ops)\n        ops_by_gel = ops.group_by { |op| pct_and_type(op) }\n        ops_by_gel.each do |gel_params, ops|\n            ops.sort_by! { |op| sort_list(op) }.extend(OperationList)\n        end\n        ops_by_gel\n    end\n\n    def sort_list(op)\n        fv = op.input(FRAGMENT)\n        [fv.child_item_id, fv.row, fv.column]\n    end\n\n    def pct_and_type(op)\n        [op.input(PERCENTAGE).val, op.input(TYPE).val]\n    end\n\n    def associate_test_volumes(ops)\n        ops.each { |op| op.input(FRAGMENT).part.associate(:volume, 32) }\n    end\n\n    def debug_table(ops, gel_params=\"\")\n        show do\n            note gel_params\n            table ops.start_table\n                .input_item(FRAGMENT)\n                .custom_column(heading: \"Gel Row\") { |op| op.input(FRAGMENT).row }\n                .custom_column(heading: \"Gel Col\") { |op| op.input(FRAGMENT).column }\n                .end_table\n        end\n    end\n\n    # Selects `operations` with `status == 'running'`\n    # Different from {Operations#running}, which selects based on\n    #   `status != 'error'`\n    #\n    def operations_running_strict\n        operations.select { |op| op.status == 'running' }\n    end\n\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 1.78, materials: 1.07 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":750,"name":"Yeast Library in Soln 1","description":"concentrated yeast DNA library sample stored in Zymoprep solution 1, in -80","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:47:26.000-08:00","updated_at":"2018-02-15T08:47:21.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M80","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":752,"name":"Zymolyased Yeast Library","description":"yeast DNA library sample after zymoprep step, before exonuclease step","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:48:39.000-08:00","updated_at":"2018-02-15T08:50:26.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Treat With Zymolyase","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Yeast Library","sample_types":["DNA Library"],"object_types":["Yeast Library in Soln 1"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Yeast Library","sample_types":["DNA Library"],"object_types":["Zymolyased Yeast Library"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# SG\n# Refactored by Devin Strickland 2/12/18\n\nneeds \"Yeast Display/YeastDisplayHelper\"\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/SortHelper\"\n\nclass Protocol\n\n    include YeastDisplayHelper, Debug, SortHelper\n\n    INPUT_YEAST = 'Yeast Library'\n    OUTPUT_YEAST = INPUT_YEAST\n\n    MIXER = \"orbital shaker in the 37 #{DEGREES_C} incubator\"\n\n    ZYMOLYASE_VOL = { qty: 5, units: MICROLITERS }\n    ZYMOLYASE_TIME = { qty: 4, units: HOURS }\n    SPEED = { qty: 900, units: 'RPM' }\n\n    def main\n\n        # sort ops by id - DO NOT DELETE\n        ops_sorted=sortByMultipleIO(operations.running, [\"in\"], [INPUT_YEAST], [\"id\"], [\"item\"])\n        operations=ops_sorted\n\n        operations.retrieve\n\n        operations.each do |op|\n            op.pass(INPUT_YEAST)\n            op.output(OUTPUT_YEAST).item.move_to(MIXER)\n        end\n\n        zymolyase = Item.where(sample_id: Sample.find_by_name(\"Zymolyase\")).where(Item.arel_table[:location].not_eq('deleted')).order('id ASC').first\n\n        # Get ice blocks\n        get_zymolyase\n\n        thaw_samples zymolyase\n\n        treat_with_zymolyase\n\n        show do\n            title \"Return the following item(s)\"\n\n            note \"Return Zymolyase at #{zymolyase.location}\"\n        end\n\n        operations.store\n\n        return {}\n\n    end\n\n    def get_zymolyase\n        show do\n            title \"Grab an ice block\"\n\n            warning \"In the following step you will need to take Zymolyase enzyme out of freezer. Make sure the enzyme is kept on ice for the duration of the protocol.\"\n        end\n    end\n\n    def thaw_samples zymolyase\n        show do\n            title \"Thaw samples\"\n\n            check \"Grab zymolyase from #{zymolyase.location}\"\n            check \"Allow the samples to thaw on the 42C heatblock for 5 minutes\"\n        end\n    end\n\n    def treat_with_zymolyase\n        show do\n            title \"Treat samples with zymolyase\"\n\n            note \"Add zymolyase to each sample in the fume hood according to the table\"\n            table operations.start_table\n              .input_item(INPUT_YEAST)\n              .custom_column(heading: \"zymolyase (#{ZYMOLYASE_VOL[:units]})\", checkable: true) { |op| ZYMOLYASE_VOL[:qty] }\n              .end_table\n            note \"Vortex samples after zymolyase is added.\"\n            check \"Place the samples on the #{MIXER} for \u003cb\u003e#{qty_display(ZYMOLYASE_TIME)}\u003c/b\u003e at #{qty_display(SPEED)}\"\n        end\n    end\n\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 6.25, materials: 1.84}\nend","documentation":"Step 2 in preparation of yeast DNA library samples for NGS. \nFull flow is:\n1. Store concentrated  sample in Zymoprep Solution 1, in -80\n2. Zymoprep sample and clean\n3. Exonuclease digestion and purification of sample\n4. qPCR to amplify, clean up, using pETCON adapters \n5. qPCR to amplify and add illumina adapters","test":"","timing":null}},{"sample_types":[{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":752,"name":"Zymolyased Yeast Library","description":"yeast DNA library sample after zymoprep step, before exonuclease step","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:48:39.000-08:00","updated_at":"2018-02-15T08:50:26.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":749,"name":"Plasmid Library","description":"A special case of plasmid that contains many unique sequences","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:45:59.000-08:00","updated_at":"2018-01-11T14:45:59.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"}],"operation_type":{"name":"Yeast Plasmid Extraction","category":"Next Gen Prep","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Yeast Library","sample_types":["DNA Library"],"object_types":["Zymolyased Yeast Library"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Plasmid Library","sample_types":["DNA Library"],"object_types":["Plasmid Library"],"part":false,"array":false,"routing":"L","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# SG\n# Refactored by Devin Strickland 2/12/18\n\nneeds \"Next Gen Prep/NextGenPrepHelper\"\nneeds \"Standard Libs/Units\"\nneeds \"Yeast Display/YeastDisplayHelper\"\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/SortHelper\"\nneeds \"Standard Libs/Feedback\"\n\nclass Protocol\n\n    include NextGenPrepHelper, Units, YeastDisplayHelper, Debug, SortHelper, Feedback\n\n    INPUT_YEAST = \"Yeast Library\"\n    OUTPUT_PLASMID = \"Plasmid Library\"\n\n    SOLN2 = \"Lysis buffer (Solution 2)\"\n    SOLN2_VOL = { qty: 200, units: 'µl' }\n    SOLN2_TIME = { qty: 5, units: 'min' }\n\n    SOLN3 = \"Neutralizing buffer (Solution 3)\"\n    SOLN3_VOL = { qty: 400, units: 'µl' }\n\n    FREEZE_TIME = { qty: 30, units: 'min' }\n    INVERT_TIMES = 10\n\n    def main\n\n        operations.retrieve\n\n        # sort by input id before make\n        ops = sortByMultipleIO(operations, [\"in\"], [INPUT_YEAST], [\"id\"], [\"item\"])\n        operations = ops\n        operations.make\n\n        put_samples_in_freezer\n\n        thaw_samples\n\n        gather_materials\n\n        assign_tube_numbers(INPUT_YEAST, OUTPUT_PLASMID)\n\n        number_tubes\n\n        lyse_and_neutralize\n\n        pellet_cell_debris\n\n        # number_tubes_and_columns\n\n        wash_samples\n\n        elute_samples(OUTPUT_PLASMID)\n\n        operations.each { |op|\n            if( !(op.input(INPUT_YEAST).item.get(:bin).nil?) ) # sorted sample\n                op.output(OUTPUT_PLASMID).item.associate(:bin, op.input(INPUT_YEAST).item.get(:bin))\n            end\n            op.input(INPUT_YEAST).item.mark_as_deleted\n        }\n\n        operations.store\n\n        get_protocol_feedback\n\n        return {}\n\n    end\n\n    def gather_materials\n        show do\n            title \"Gather the following materials\"\n\n            check \"#{SOLN2} from Zympoprep kit (at least #{operations.length*SOLN2_VOL[:qty]} #{SOLN2_VOL[:units]}) BLUE color solution\"\n            check \"#{SOLN3} from Zympoprep kit (at least #{operations.length*SOLN3_VOL[:qty]} #{SOLN3_VOL[:units]}) YELLOW color solution\"\n            # check \"#{operations.length} Qiagen miniprep column(s)\"\n            check \"PB, PE, EB buffers from Qiagen kit\"\n        end\n    end\n\n    def put_samples_in_freezer\n        show do\n            title \"Freeze the samples\"\n\n            check \"Place the rack containing the samples in the -80C\"\n            check \"Set timer for \u003cb\u003e#{qty_display(FREEZE_TIME)}\u003c/b\u003e\"\n        end\n    end\n\n    def thaw_samples\n        show do\n            title \"Thaw the samples\"\n\n            check \"When timer is finished, retrieve samples from -80C and thaw on 42 C heat block\"\n            check \"Set timer for \u003cb\u003e5 minutes\u003c/b\u003e\"\n            check \"After setting the timer, proceed to the next step to gather items\"\n        end\n    end\n\n    def number_tubes\n        show do\n            title \"Re-label tubes\"\n\n            note \"Number the tubes according to the table\"\n            table operations.start_table\n                .input_item(INPUT_YEAST)\n                .custom_column(heading: \"Number\", checkable: true) { |op| op.input(INPUT_YEAST).item.associations[:tube_number] }\n                .end_table\n        end\n    end\n\n    def lyse_and_neutralize\n        show do\n            title \"Lyse the samples\"\n\n            check \"Add \u003cb\u003e#{qty_display(SOLN2_VOL)}\u003c/b\u003e of #{SOLN2} BLUE color solution to each sample\"\n            check \"Start 5 minute timer and invert samples \u003cb\u003e#{INVERT_TIMES} times\u003c/b\u003e to mix\"\n            check \"At 3 minute mark invert samples \u003cb\u003e5 more times\u003c/b\u003e\"\n\n            # note \"While you wait, get #{operations.length} #{MICROFUGE_TUBE}s and number them 1 - #{operations.length}\"\n        end\n\n        show do\n            title \"Neutralize the samples\"\n\n            check \"When the timer is finished, add \u003cb\u003e#{qty_display(SOLN3_VOL)}\u003c/b\u003e of #{SOLN3} YELLOW color solution to all samples\"\n            check \"Invert samples \u003cb\u003e#{INVERT_TIMES} times\u003c/b\u003e to mix\"\n        end\n    end\n\n    def pellet_cell_debris\n        show do\n            title \"Pellet cell debris\"\n\n            [MICROFUGE_TUBE, COLUMN].each do |receptacle|\n                check CENTRIFUGE % qty_display(LONG_SPIN_EXTRACT_PLASMID)\n                check \"While waiting, get #{operations.length} #{receptacle}s and label them 1 - #{operations.length}\"\n                check \"Transfer the supernatant of each sample to the new empty #{receptacle} with the same number\"\n            end\n\n        end\n    end\n\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 9.79, materials: 1.42  }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"library":{"name":"NextGenPrepHelper","category":"Next Gen Prep","code_source":"\nneeds \"Standard Libs/Units\"\n\nmodule NextGenPrepHelper\n\n    include Units\n\n    LONG_SPIN = { qty: 5, units: MINUTES }\n    LONG_SPIN_EXTRACT_PLASMID = { qty: 10, units: MINUTES }\n    SHORT_SPIN = { qty: 1, units: MINUTES }\n\n    PB = \"binding buffer PB\"\n    PB_VOL = { qty: 700, units: MICROLITERS }\n    PB_WASHES = 1\n\n    PE = \"wash buffer PE\"\n    PE_VOL = { qty: 700, units: MICROLITERS }\n    PE_WASHES = 2\n\n    EB = \"elution buffer EB\"\n    EB_VOL = { qty: 30, units: MICROLITERS }\n\n    COLUMN = \"\u003cb\u003eblue\u003c/b\u003e Qiagen miniprep column\"\n    MICROFUGE_TUBE = \"1.5 #{MILLILITERS} microfuge tube\"\n\n    CENTRIFUGE_SPEED = \"17,000 #{TIMES_G}\"\n\n    CENTRIFUGE = \"Centrifuge samples at \u003cb\u003e#{CENTRIFUGE_SPEED}\u003c/b\u003e for \u003cb\u003e%s\u003c/b\u003e\"\n    ADD_BUFFER = \"Add \u003cb\u003e%s\u003c/b\u003e of \u003cb\u003e%s\u003c/b\u003e to each column\"\n\n\n    def assign_tube_numbers(in_handle, out_handle)\n        operations.sort_by! { |op| op.input(in_handle).item.id }\n\n        operations.each_with_index do |op, i|\n            op.input(in_handle).item.associate(:tube_number, \"#{i + 1}\")\n            txfr_tube_numbers(op, in_handle, out_handle)\n        end\n    end\n\n    def number_tubes_and_columns\n        show do\n            title \"Number tubes and columns\"\n\n            note \"Get #{operations.length} #{COLUMN}s with collection tubes\"\n            note \"Number each set 1 - #{operations.length}\"\n        end\n    end\n\n    def wash_samples(pb_washes=PB_WASHES, pe_washes=PE_WASHES)\n        show do\n            title \"Wash samples\"\n\n            pb_washes.times do |i|\n                check CENTRIFUGE % qty_display(SHORT_SPIN)\n                check \"Aspirate the flow-through out of each collection tube\"\n                check ADD_BUFFER % [qty_display(PB_VOL), PB]\n            end\n\n            pe_washes.times do |i|\n                check CENTRIFUGE % qty_display(SHORT_SPIN)\n                check \"Aspirate the flow-through out of each collection tube\"\n                check ADD_BUFFER % [qty_display(PE_VOL), PE]\n            end\n        end\n    end\n\n    def elute_samples(out_handle)\n        show do\n            title \"Centrifuge 2X to remove residual buffer\"\n\n            check CENTRIFUGE % qty_display(SHORT_SPIN)\n            check \"Aspirate the flow-through out of each collection tube\"\n            check CENTRIFUGE % qty_display(SHORT_SPIN) + \" to remove any residual buffer\"\n\n            check \"While you wait, get #{operations.length} #{MICROFUGE_TUBE}s and label them with the numbers in the table\"\n            check \"Carefully transfer each column to the corresponding #{MICROFUGE_TUBE}\"\n\n            table operations.start_table\n                .custom_column(heading: \"Column number\") { |op| op.output(out_handle).item.associations[:tube_number] }\n                .custom_column(heading: \"Microfuge tube number\", checkable: true) { |op| op.output(out_handle).item.id }\n                .end_table\n        end\n\n        show do\n            title \"Elute DNA\"\n\n            check ADD_BUFFER % [qty_display(EB_VOL), EB]\n            check \"Wait 1 #{MINUTES}\"\n            check CENTRIFUGE % qty_display(SHORT_SPIN)\n\n            check \"Reload the eluted volume of each sample on its column\"\n            check \"Wait 1 #{MINUTES}\"\n            check CENTRIFUGE % qty_display(SHORT_SPIN)\n\n            check \"Throw away the #{COLUMN}s and close the caps to the #{MICROFUGE_TUBE}s\"\n        end\n    end\n\n    def txfr_tube_numbers(op, in_handle, out_handle)\n        op.output(out_handle).item.associate :tube_number, op.input(in_handle).item.associations[:tube_number]\n    end\n\n    def expanded_volume_display(qty, volume_factor, precision=0)\n        total_qty = (qty[:qty] * volume_factor).round(precision)\n        \"#{total_qty} #{qty[:units]}\"\n    end\n\n    def txfr_bin(op, in_handle, out_handle)\n        txfr_association(op, in_handle, out_handle, :bin)\n    end\n\n    def txfr_barcode(op, in_handle, out_handle)\n        txfr_association(op, in_handle, out_handle, :barcode)\n    end\n\n    def txfr_association(op, in_handle, out_handle, key)\n        input_item = part_or_item(op.input(in_handle))\n        output_item = part_or_item(op.output(out_handle))\n        data = input_item.get(key)\n        output_item.associate(key, data) if data\n    end\n\n    def part_or_item(field_value)\n        field_value.part? ? field_value.part : field_value.item\n    end\n\n    def associate_random_barcodes(operations:, in_handle:)\n        operations.each do |op|\n            item = part_or_item(op.input(in_handle))\n            item.associate(:barcode, Array.new(6) { |i| %w(C A T G).sample }.join)\n        end\n    end\n\n    def display_barcode_associations(operations:, in_handle:, out_handle: nil)\n        out_handle ||= in_handle\n        show do\n            table operations.start_table\n                .custom_column(heading: \"input item\") { |op| part_or_item(op.input(in_handle)).to_s }\n                .custom_column(heading: \"input bc\") { |op| part_or_item(op.input(in_handle)).get(:barcode) }\n                .custom_column(heading: \"output bc\") { |op| part_or_item(op.output(out_handle)).get(:barcode) }\n                .end_table\n        end\n    end\n\nend"}},{"sample_types":[{"id":74,"name":"Primer Mix","description":"A mix of more than one primer","created_at":"2018-05-03T09:14:49.000-07:00","updated_at":"2018-05-03T09:14:49.000-07:00","field_types":[]},{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":11,"parent_id":4,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":12,"parent_id":4,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":13,"parent_id":4,"name":"Template","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2,"field_type_id":13,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":3,"field_type_id":13,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":4,"field_type_id":13,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":5,"field_type_id":13,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}},{"id":2547,"field_type_id":13,"sample_type_id":70,"object_type_id":null,"created_at":"2018-09-18T16:02:54.000-07:00","updated_at":"2018-09-18T16:02:54.000-07:00","sample_type":{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00"}}],"sample_types":["Plasmid","E coli strain","Fragment","Yeast Strain","DNA Library"],"object_types":[null,null,null,null,null]},{"id":14,"parent_id":4,"name":"Forward Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":6,"field_type_id":14,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2664,"field_type_id":14,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":15,"parent_id":4,"name":"Reverse Primer","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-12T19:07:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":7,"field_type_id":15,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2665,"field_type_id":15,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-22T13:03:32.000-07:00","updated_at":"2018-10-22T13:03:32.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]},{"id":16,"parent_id":4,"name":"Restriction Enzyme(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":17,"parent_id":4,"name":"Yeast Marker","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:17:39.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6423,"parent_id":4,"name":"Fragment Mix Array","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-24T11:05:59.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2667,"field_type_id":6423,"sample_type_id":1,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":2668,"field_type_id":6423,"sample_type_id":4,"object_type_id":null,"created_at":"2018-10-23T13:35:15.000-07:00","updated_at":"2018-10-23T13:35:15.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer","Fragment"],"object_types":[null,null]}]},{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":4,"parent_id":2,"name":"Sequence","ftype":"url","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:30:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5,"parent_id":2,"name":"Sequence Verification","ftype":"url","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6,"parent_id":2,"name":"Bacterial Marker","ftype":"string","choices":"Amp,Kan,Amp + Kan,Spec,Kan + Spec,Chlor,Tet,NA,Other","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-12-27T11:26:31.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7,"parent_id":2,"name":"Yeast Marker","ftype":"string","choices":"HIS,TRP,URA,LEU,NatMX,KanMX,HygMX,BleoMX,5FOA,NA,Other","array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2017-02-13T10:49:58.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":27,"field_type_id":7,"sample_type_id":1,"object_type_id":null,"created_at":"2017-02-13T10:49:58.000-08:00","updated_at":"2017-02-13T10:49:58.000-08:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":8,"parent_id":2,"name":"Length","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:16:33.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":42,"parent_id":2,"name":"Sequencing Primers","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":26,"field_type_id":42,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T21:30:48.000-07:00","updated_at":"2016-05-09T21:30:48.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":46,"parent_id":2,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":29,"field_type_id":46,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":47,"parent_id":2,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":30,"field_type_id":47,"sample_type_id":1,"object_type_id":null,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":48,"parent_id":2,"name":"QC_length","ftype":"number","choices":null,"array":false,"required":false,"created_at":"2017-05-24T14:51:40.000-07:00","updated_at":"2017-05-24T14:51:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":5816,"parent_id":2,"name":"Transformation Temperature","ftype":"number","choices":"37,30","array":false,"required":false,"created_at":"2018-09-17T15:02:22.000-07:00","updated_at":"2018-11-06T11:31:23.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":16203,"parent_id":2,"name":"Comp Cells","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":3108,"field_type_id":16203,"sample_type_id":3,"object_type_id":null,"created_at":"2020-02-14T10:28:40.000-08:00","updated_at":"2020-02-14T10:28:40.000-08:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":10,"parent_id":3,"name":"Parent","ftype":"sample","choices":null,"array":null,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1,"field_type_id":10,"sample_type_id":3,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":3,"name":"E coli strain","description":"A strain of E coli distinguished from others by genomic (not plasmid) modifications.","created_at":"2013-10-15T10:16:52.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["E coli strain"],"object_types":[null]}]},{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00","field_types":[{"id":18,"parent_id":5,"name":"Parent","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-25T08:43:19.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":8,"field_type_id":18,"sample_type_id":5,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]},{"id":19,"parent_id":5,"name":"Integrant","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":9,"field_type_id":19,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}},{"id":10,"field_type_id":19,"sample_type_id":4,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":4,"name":"Fragment","description":"A linear double stranded piece of DNA from PCR or Restriction Digest","created_at":"2013-10-16T14:33:41.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid","Fragment"],"object_types":[null,null]},{"id":20,"parent_id":5,"name":"Plasmid","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":11,"field_type_id":20,"sample_type_id":2,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":2,"name":"Plasmid","description":"A circular piece of double stranded DNA","created_at":"2013-10-15T09:59:25.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Plasmid"],"object_types":[null]},{"id":21,"parent_id":5,"name":"Integrated Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":22,"parent_id":5,"name":"Plasmid Marker(s)","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":23,"parent_id":5,"name":"Mating Type","ftype":"string","choices":"MATa,MATalpha,Diploid","array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-10T09:05:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":24,"parent_id":5,"name":"QC Primer1","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":12,"field_type_id":24,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":25,"parent_id":5,"name":"QC Primer2","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:23:30.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":13,"field_type_id":25,"sample_type_id":1,"object_type_id":null,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T20:40:31.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":43,"parent_id":5,"name":"QC_length","ftype":"number","choices":"","array":false,"required":false,"created_at":"2016-05-20T14:29:39.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":44,"parent_id":5,"name":"Comp_cell_limit","ftype":"string","choices":"Yes,No","array":false,"required":false,"created_at":"2016-05-20T14:35:37.000-07:00","updated_at":"2016-05-20T14:35:37.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":83,"parent_id":5,"name":"Media","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2017-07-12T19:25:25.000-07:00","updated_at":"2017-07-12T19:25:25.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":954,"parent_id":5,"name":"Has this strain passed QC?","ftype":"string","choices":"No,Yes","array":false,"required":false,"created_at":"2017-10-31T11:39:27.000-07:00","updated_at":"2017-10-31T20:14:46.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":6455,"parent_id":5,"name":"Haploids","ftype":"sample","choices":null,"array":true,"required":false,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":2669,"field_type_id":6455,"sample_type_id":5,"object_type_id":null,"created_at":"2018-10-24T19:01:40.000-07:00","updated_at":"2018-10-24T19:01:40.000-07:00","sample_type":{"id":5,"name":"Yeast Strain","description":"A strain of yeast distinguished from others by genomic or plasmid modifications","created_at":"2013-10-16T14:37:29.000-07:00","updated_at":"2015-12-08T17:40:57.000-08:00"}}],"sample_types":["Yeast Strain"],"object_types":[null]}]}],"object_types":[{"id":783,"name":"Primer Mix Stock","description":"Stock containing equimolar mix of primers","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-05-03T09:17:49.000-07:00","updated_at":"2018-05-03T09:17:49.000-07:00","unit":"Primer Mix","cost":0.01,"release_method":"return","release_description":"","sample_type_id":74,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer Mix"},{"id":751,"name":"Post-exonuclease","description":"yeast DNA library sample after exonuclease step, before NGS library prep","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:48:06.000-08:00","updated_at":"2018-01-11T14:48:06.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":779,"name":"Amplified Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences (before addition of adapters for Illumina sequencing)","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-16T09:18:54.000-07:00","updated_at":"2018-04-16T09:18:54.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":782,"name":"Library Stock","description":"A library of multiple ssDNA variants","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-25T13:28:12.000-07:00","updated_at":"2018-06-06T09:50:52.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":295,"name":"Fragment Stock","description":"Fragment stock in 1.5 mL tube, usually stored in M20 fridge.","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2014-01-12T16:12:01.000-08:00","updated_at":"2014-01-12T16:12:01.000-08:00","unit":"Fragment","cost":50.0,"release_method":"return","release_description":"","sample_type_id":4,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Fragment"},{"id":755,"name":"96 qPCR collection","description":"contains up to 96 samples in qPCR stripwells or qPCR plate","min":0,"max":1000,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-02-09T08:42:28.000-08:00","updated_at":"2018-05-22T15:33:46.000-07:00","unit":"plate","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"Bench","rows":8,"columns":12,"sample_type_name":null}],"operation_type":{"name":"Make qPCR Fragment","category":"Preparative qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Forward Primer","sample_types":["Primer Mix"],"object_types":["Primer Mix Stock"],"part":false,"array":false,"routing":"FP","preferred_operation_type_id":null,"preferred_field_type_id":102,"choices":null},{"ftype":"sample","role":"input","name":"Reverse Primer","sample_types":["Primer Mix"],"object_types":["Primer Mix Stock"],"part":false,"array":false,"routing":"RP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"input","name":"Template","sample_types":["DNA Library","DNA Library","DNA Library","Fragment"],"object_types":["Post-exonuclease","Amplified Fragment Library","Library Stock","Fragment Stock"],"part":false,"array":false,"routing":"T","preferred_operation_type_id":329,"preferred_field_type_id":3374,"choices":null},{"ftype":"string","role":"input","name":"Program","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"qPCR1,qPCR2"},{"ftype":"sample","role":"output","name":"Fragment","sample_types":["DNA Library"],"object_types":["96 qPCR collection"],"part":true,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# Make qPCR Fragment\r\n\r\nneeds \"Preparative qPCR/PreparativeqPCRHelper\"\r\n\r\nclass Protocol\r\n\r\n    include PreparativeqPCRHelper\r\n\r\n    def main\r\n\r\n        run_protocol\r\n\r\n    end\r\n\r\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 7.04, materials: 1.69 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2016-05-09T20:40:31.000-07:00","updated_at":"2016-05-09T21:25:11.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]},{"id":70,"name":"DNA Library","description":"A sample that contains a pool of DNA molecules with many unique sequences","created_at":"2018-01-02T14:28:12.000-08:00","updated_at":"2018-01-02T14:28:12.000-08:00","field_types":[{"id":3965,"parent_id":70,"name":"Oligo Pool","ftype":"sample","choices":null,"array":false,"required":false,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1772,"field_type_id":3965,"sample_type_id":75,"object_type_id":null,"created_at":"2018-06-05T14:45:01.000-07:00","updated_at":"2018-06-05T14:45:01.000-07:00","sample_type":{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00"}}],"sample_types":["Oligo Pool"],"object_types":[null]}]},{"id":75,"name":"Oligo Pool","description":"Pool or library of ssDNA oligos. May contain one or more sublibraries. In array fields, the n-th position corresponds to n-th sublibrary. \"forward priming site\" and \"reverse priming site\" are read as primer sequences.","created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2019-01-23T16:24:45.000-08:00","field_types":[{"id":3947,"parent_id":75,"name":"Manufacturer","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3948,"parent_id":75,"name":"Oligo Library ID","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-07T09:48:57.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3949,"parent_id":75,"name":"inner forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1763,"field_type_id":3949,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3950,"parent_id":75,"name":"inner reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1764,"field_type_id":3950,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3951,"parent_id":75,"name":"sublibrary forward primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1765,"field_type_id":3951,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3952,"parent_id":75,"name":"sublibrary reverse primer (array)","ftype":"sample","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[{"id":1766,"field_type_id":3952,"sample_type_id":1,"object_type_id":null,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","sample_type":{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2013-10-08T10:18:01.000-07:00","updated_at":"2015-11-29T07:55:20.000-08:00"}}],"sample_types":["Primer"],"object_types":[null]},{"id":3953,"parent_id":75,"name":"min length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3954,"parent_id":75,"name":"max length (nt) (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3955,"parent_id":75,"name":"variants (array)","ftype":"number","choices":null,"array":true,"required":true,"created_at":"2018-06-05T11:30:26.000-07:00","updated_at":"2018-06-05T11:30:26.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3964,"parent_id":75,"name":"sublibrary name (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2018-06-05T14:37:16.000-07:00","updated_at":"2018-06-05T14:37:16.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7477,"parent_id":75,"name":"forward priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":7478,"parent_id":75,"name":"reverse priming site (array)","ftype":"string","choices":null,"array":true,"required":true,"created_at":"2019-01-23T16:24:45.000-08:00","updated_at":"2019-01-23T16:24:45.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":207,"name":"Primer Aliquot","description":"Primers at low concentration (10uM) for every day use","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"{ \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }","vendor":"No vendor information","created_at":"2013-10-14T17:03:58.000-07:00","updated_at":"2019-02-13T14:54:25.000-08:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer"},{"id":824,"name":"96-Well Primer Aliquot Plate","description":"96-well plate containing primers at aliquot concentration of 10 µM (or other concentration as specified).","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-11-02T14:59:18.000-07:00","updated_at":"2018-11-02T14:59:37.000-07:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"N/A","rows":8,"columns":12,"sample_type_name":null},{"id":751,"name":"Post-exonuclease","description":"yeast DNA library sample after exonuclease step, before NGS library prep","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-01-11T14:48:06.000-08:00","updated_at":"2018-01-11T14:48:06.000-08:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":779,"name":"Amplified Fragment Library","description":"A special case of dsDNA fragment that contains many unique sequences (before addition of adapters for Illumina sequencing)","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-16T09:18:54.000-07:00","updated_at":"2018-04-16T09:18:54.000-07:00","unit":"DNA Library","cost":0.01,"release_method":"return","release_description":"","sample_type_id":70,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"DNA Library"},{"id":755,"name":"96 qPCR collection","description":"contains up to 96 samples in qPCR stripwells or qPCR plate","min":0,"max":1000,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-02-09T08:42:28.000-08:00","updated_at":"2018-05-22T15:33:46.000-07:00","unit":"plate","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":"","prefix":"Bench","rows":8,"columns":12,"sample_type_name":null}],"operation_type":{"name":"Make qPCR Fragment WITH PLATES","category":"Preparative qPCR","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Forward Primer","sample_types":["Primer"],"object_types":["Primer Aliquot"],"part":false,"array":false,"routing":"FP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"input","name":"Reverse Primer","sample_types":["Primer"],"object_types":["96-Well Primer Aliquot Plate"],"part":true,"array":false,"routing":"RP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"input","name":"Template","sample_types":["DNA Library","DNA Library"],"object_types":["Post-exonuclease","Amplified Fragment Library"],"part":false,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Program","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":"qPCR1,qPCR2"},{"ftype":"sample","role":"output","name":"Fragment","sample_types":["DNA Library"],"object_types":["96 qPCR collection"],"part":true,"array":false,"routing":"T","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"#  Make qPCR Fragment WITH PLATES\r\n\r\nneeds \"Preparative qPCR/PreparativeqPCRHelper\"\r\n\r\nclass Protocol\r\n\r\n    include PreparativeqPCRHelper\r\n\r\n    def main\r\n\r\n        run_protocol\r\n\r\n    end\r\n\r\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 7.4, materials: 2.37 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"library":{"name":"FragmentLibrary","category":"Preparative qPCR","code_source":"needs \"Standard Libs/ProvenanceFinder\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Standard Libs/Debug\"\nneeds \"Sample Models/Primer\"\nneeds \"Sample Models/OligoPool\"\nneeds \"Sample Models/DNALibrary\"\n\nclass FragmentLibrary\n\n    include ProvenanceFinder, CommonInputOutputNames, Debug\n\n    OVERHANG = 'Overhang Sequence'\n    ANNEAL = \"Anneal Sequence\"\n    FWD_TEMPLATE = \"FWD_%d\"\n    REV_TEMPLATE = \"REV_%d\"\n    OLIGO_POOL = \"Oligo Pool\"\n\n    attr_accessor :known_item, :sample\n    attr_accessor :oligo_pools, :provenance, :errors\n    attr_accessor :forward_primer, :reverse_primer\n    attr_accessor :min_length, :max_length\n\n    # Instantiates a new FragmentLibrary\n    #\n    # @param known_item [Item] an existing item, some type of DNA fragment library\n    # @param sample [Sample] Sample used for addressing sublibraries in OligoPool\n    # @return [FragmentLibrary]\n    def initialize(known_item:, sample: nil)\n        @known_item = known_item\n        @sample = sample || known_item.sample\n        @errors = {}\n        @provenance = []\n        @oligo_pools = []\n        @forward_primer = nil\n        @reverse_primer = nil\n        @min_length = 0\n        @max_length = 0\n    end\n\n    # Find Operation history of @known_item\n    #\n    # @return [Array]\n    def detect_provenance\n        self.provenance = walk_back(\"Don't Stop\", known_item.id)\n    end\n\n    # Parses Operation history for last Item that is an Oligo Pool\n    #\n    # @return [OligoPool]\n    def detect_oligo_pools\n        if (oligo_pool = sample.properties.fetch(OLIGO_POOL))\n            self.oligo_pools = [OligoPool.new(sample: oligo_pool)]\n            return\n        end\n\n        detect_provenance unless provenance.present?\n        prov_fvs = FieldValue.includes(:child_sample)\n                             .where(parent_id: prov_op_ids, parent_class: \"Operation\")\n        ogp_fvs = prov_fvs.select { |fv| OligoPool.is_oligo_pool?(fv.sample) }\n\n        if ogp_fvs.present?\n            self.oligo_pools = ogp_fvs.map { |fv| OligoPool.from_item(fv.item) }\n            return\n        end\n\n        if known_item.get(:template_id)\n            self.oligo_pools = [OligoPool.new(sample: Sample.find(known_item.get(:template_id)))]\n            return\n        end\n\n        if known_item.get(:template)\n            oligo_pool_id = known_item.get(:template).match(/(\\d+) (\\w+)/).captures[0]\n            self.oligo_pools = [OligoPool.new(sample: Sample.find(oligo_pool_id))]\n            return\n        end\n\n        unless oligo_pools.present?\n            errors[:missing_oligo_pool] = \"Could not find oligo pool(s) for Item #{known_item}.\"\n        end\n    end\n\n    # Compares names of all sulibraries of all oligo pools with all sample names from\n    #   the provenance,including self.sample. Returns the names of sublibraries that\n    #   are found in the names of any of the samples. The entire sublibrary name\n    #   must appear in the sample name, but the comparison is case-insensitive.\n    def sublibrary_names\n        prov_fvs = FieldValue.includes(:child_sample)\n                             .where(parent_id: prov_op_ids, parent_class: \"Operation\")\n        prov_sample_names = prov_fvs.map { |fv| fv.sample.try(:name) }\n        prov_sample_names.append(sample.name)\n        all_sublib_names = oligo_pools.map { |ogp| ogp.names }.flatten\n        all_sublib_names.select { |s| prov_sample_names.select { |p| p =~ /#{s}/i }.any? }\n    end\n\n    # TODO: This is probably going to break if there are two sublibraries from\n    # the same oligo pool\n    def sublibrary_name(oligo_pool)\n        names = oligo_pool.names \u0026 sublibrary_names\n        unless names.length == 1\n            msg = \"Failed to find unique sublibrary: #{names}\"\n            raise SublibraryIndexError.new(msg)\n        end\n        names.first\n    end\n\n    def prov_op_ids\n        provenance.flatten.map { |op| op.id }\n    end\n\n    def variants\n        oligo_pools.map { |ogp| ogp.variants(sublibrary_name(ogp)).to_i }.reduce(:+)\n    end\n\n    def min_oligo_pool_length\n        oligo_pools.map { |ogp| ogp.min_length(sublibrary_name(ogp)).to_i }.min\n    end\n\n    def max_oligo_pool_length\n        oligo_pools.map { |ogp| ogp.max_length(sublibrary_name(ogp)).to_i }.max\n    end\n\n    # Sets primers to be used for amplifying library in calling Protocol\n    # Will be used to calculate the size distribution of the OUTPUT FragmentLibrary\n    #\n    # @param forward_primer [Sample]\n    # @param reverse_primer [Sample]\n    def set_primers(forward_primer:, reverse_primer:)\n        forward_primer = Primer.new(sample: forward_primer)\n        reverse_primer = Primer.new(sample: reverse_primer)\n        if primers_valid?(forward_primer: forward_primer, reverse_primer: reverse_primer)\n            self.forward_primer = forward_primer\n            self.reverse_primer = reverse_primer\n        else\n            input_primers = [forward_primer.name, reverse_primer.name].to_sentence\n            msg = \"Primer pair #{input_primers} invalid for Oligo Pool #{oligo_pool.sample.id}.\"\n            errors[:mismatched_sublibrary_primers] = msg\n        end\n    end\n\n    def primers_valid?(forward_primer:, reverse_primer:)\n        oligo_pools.each do |oligo_pool|\n            return false unless oligo_pool.primers_valid?(\n                forward_primer: forward_primer,\n                reverse_primer: reverse_primer,\n                sublibrary_name: sublibrary_name(oligo_pool)\n            )\n        end\n        true\n    end\n\n    # TODO: This doesn't deal with branched provenance correctly.\n    # Different branches can have oligo pools with differrent priming sites.\n    # PCRs need to be simulated in the correct order for each branch.\n    def calculate_length\n        next_sites = oligo_pools.map { |ogp| ogp.priming_sites(sublibrary_name(ogp)) }\n                                .flatten.uniq\n\n        unless next_sites.length == 2\n            ogp_ids = oligo_pools.map { |ogp| ogp.sample.id }\n            msg = \"Incompatible priming sites #{next_sites} found for OligoPools #{ogp_ids}\"\n            raise IncompatiblePrimingSitesError.new(msg)\n        end\n\n        priming_length = next_sites[0].length + next_sites[1].length\n\n        lengths = oligo_pools.map { |ogp| ogp.lengths(sublibrary_name(ogp)) }.flatten.sort\n        min_internal_length = lengths[0] - priming_length\n        max_internal_length = lengths[-1] - priming_length\n\n\n        primer_sets.each do |primers|\n            sites = next_sites\n            next_sites = []\n\n            bindings = Primer.get_bindings(primers: primers, sites: sites)\n\n            bindings.each do |b|\n                priming_length += b[:added_length]\n                next_sites.append(b[:primer].sequence)\n            end\n        end\n\n        self.min_length = min_internal_length + priming_length\n        self.max_length = max_internal_length + priming_length\n    end\n\n    def primer_sets\n        primer_sets = []\n\n        pcr_ops.each do |op|\n            # There are older operations that use different I/O names\n            # fp = Primer.new(op.input(FORWARD_PRIMER).sample)\n            # rp = Primer.new(op.input(REVERSE_PRIMER).sample)\n            # primer_sets.append([fp, rp])\n            primers = op.inputs.select { |fv| fv.sample \u0026\u0026 fv.sample.sample_type.name == \"Primer\" }\n            primers = primers.map { |fv| Primer.from_item(fv.item) }\n            primer_sets.append(primers)\n        end\n\n        if forward_primer \u0026\u0026 reverse_primer\n            primer_sets.append([forward_primer, reverse_primer])\n        end\n\n        primer_sets\n    end\n\n    def pcr_ops\n        provenance.flatten.select { |op| pcr_operation?(op) }.reverse\n    end\n\n    def pcr_operation?(op)\n        pcr_op_names = [\n            \"Make qPCR Fragment\",\n            \"Make qPCR Fragment WITH PLATES\",\n            \"Library qPCR Black Box\"\n        ]\n\n        pcr_op_names.include?(op.operation_type.name)\n    end\nend"}},{"library":{"name":"PreparativeqPCRHelper","category":"Preparative qPCR","code_source":"# needs \"Standard Libs/SortHelper\"\nneeds \"Standard Libs/UploadHelper\"\nneeds \"Standard Libs/Units\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Standard Libs/Feedback\"\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/OperationErrors\"\n# needs \"Standard Libs/HiddenInputHelper\"\n\nneeds \"PCR Libs/PCRComposition\"\nneeds \"PCR Libs/PCRProgram\"\nneeds \"PCR Libs/MasterMixHelper\"\n\nneeds \"Preparative qPCR/FragmentLibrary\"\n# needs \"Preparative qPCR/PreparativeqPCRDebug\"\n\nmodule IlluminaAdapters\n\n    INDEX_LENGTH = 6 # bp, length of illumina index\n\n    # Gets illumina barcode from a primer sample\n    #\n    # @param primer [Sample] the primer\n    # @return [String] the barcode\n    def get_barcode(primer)\n        # TODO: Refactor to deal with primers that don't have an overhang sequence\n        barcode = \"\"\n        ohang = primer.properties.fetch(\"Overhang Sequence\")\n        if ohang\n            if ohang.length \u003e= INDEX_LENGTH\n                tmp = ohang[(ohang.length-INDEX_LENGTH)..(ohang.length-1)].downcase.reverse!\n                barcode = tmp.gsub('a','T').gsub('t','A').gsub('c','G').gsub('g','C')\n            end\n        end\n        barcode\n    end\n\n    # Adds barcodes to a matrix associated with the output collection\n    #\n    # @param ops [OperationList]\n    # @param input_name [String]\n    # @param output_name [String]\n    def associate_barcodes(ops:, input_name:, output_name:)\n        ops.each do |op|\n            # to avoid errors with Primer Mix items\n            if op.input(input_name).sample_type.name == \"Primer\"\n                barcode = get_barcode(op.input(input_name).sample)\n                if barcode\n                    part = op.output(output_name).part\n                    part.associate(:barcode, barcode)\n                end\n            end\n        end\n    end\n\nend\n\n# Handles bin numbers for multi-bin sorting\n#\nmodule MultiBinSorting\n\n    # Adds bin numbers to a matrix associated with the output collection\n    #\n    # @param ops [OperationList]\n    # @param input_name [String]\n    # @param output_name [String]\n    def associate_bins(ops:, input_name:, output_name:)\n        ops.each do |op|\n            bin = get_bin(op: op, input_name: input_name)\n            if bin\n                part = op.output(output_name).part\n                part.associate(:bin, bin)\n            end\n        end\n    end\n\n    # Provides a String for display of the bin number in tables\n    #\n    # @param ops [OperationList]\n    # @param input_name [String]\n    def bin_display(op:, input_name:)\n        bd = get_bin(op: op, input_name: input_name) || \"N/A\"\n        bd.to_s\n    end\n\n    # Accessor method for the bin number associated with the input\n    #\n    # @param ops [OperationList]\n    # @param input_name [String]\n    def get_bin(op:, input_name:)\n        op.input(input_name).item.get(:bin)\n    end\nend\n\n# Contains constants and functions related to preparative qPCR\n# Largely follows Baker Lab protocols.\n#\n# There are four main types of amplification:\n# 1) lib_qPCR1 - for ssDNA -\u003e dsDNA, verifying that amplification works,\n#      verifying that length is as designed, and (optionally) extracting a\n#      specific sublibrary from the other variants in the oligo pool.\n# 2) lib_qPCR2 - for amplifying the chosen sublibrary with the correct length for\n#      the subsequent transformation step, which typically requires a\n#      large quantity of dsDNA.\n# 3) qPCR1 - for initial amplification of plasmid or genomic DNA, prior to\n#      NGS amplicon sequencing.\n# 4) qPCR2 - for further amplification after qPCR1 and adding adaptors and\n#      indices for NGS\n#\n# Each qPCR step has a TEST run to get the correct qPCR stopping cycle (before\n#   amplification becomes non-exponential), and and a REAL run for generating\n#   the amplicon of interest.\n#\n# @author Sarah Goldberg\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nmodule PreparativeqPCRHelper\n\n    require 'matrix'\n\n    # include SortHelper\n    include UploadHelper, Units\n    #include HiddenInputHelper\n    include CommonInputOutputNames\n    include Feedback, Debug, OperationErrors\n    # include PreparativeqPCRDebug\n    include MasterMixHelper\n    include MultiBinSorting, IlluminaAdapters\n\n    MAKE_EXTRA = 1.2\n    DEFAULT_STAMP_COLUMNS = 8\n    SOFTWARE = \"Biorad CFX Manager\"\n    BASE_DIR = \"Libraries/Documents/Public Documents/Bio-Rad/CFX/Users/admin\"\n    PROG_DIR = \"#{BASE_DIR}/NGSprep\"\n    EXPORT_DIR = \"Desktop/Biofab qPCR Exports/\"\n    PCRD_SUFFIX = \".pcrd\"\n    CSV_SUFFIX = \" -  Quantification Amplification Results_SYBR.csv\"\n    SUB_ITEM = \"96 shallow plate (M20) part\"\n    M20_STR = 'M20PF '\n    SPIN_TIME = { qty: \"1\", units: MINUTES }\n    SPIN_RPM = { qty: \"300\", units: \"RPM\" }\n    MAX_OPS = 96\n    MIN_VOL = { qty: 10, units: MICROLITERS } # min volume for retaining primer aliquots. please check with lab manager before changing.\n    ANSWERS = [\"Y\",\"N\"]\n\n    NGS_BOX_NAME = \"B1234E2 M20 box\"\n\n    TEST = \"TEST\"\n    REAL = \"REAL\"\n    BACKGROUND_COLORS = [\n        \"#ff4133\",\"#ff5733\",\"#ffc033\",\"#8eff33\",\n        \"#33d6ff\",\"#3357ff\",\"#8e33ff\",\"#ff33ea\",\n        \"#ff4133\",\"#ff5733\",\"#ffc033\",\"#8eff33\"\n    ]\n\n    NUM_REACTIONS = {\n        \"qPCR1\" =\u003e 2,\n        \"qPCR2\" =\u003e 2,\n        \"lib_qPCR1\" =\u003e 2,\n        \"lib_qPCR2\" =\u003e 10,\n    }\n\n    # The top-level method that runs an entire preparative qPCR protocol\n    # A protocol shouldn't have to do anything other than call this method\n    #\n    def run_protocol\n        program_name = validate_operations\n        composition = PCRComposition.new(program_name: program_name)\n        program = PCRProgram.new(program_name: program_name, volume: composition.volume)\n\n        # TODO: make this method smart enough to deal\n        if program.program_name =~ /$lib_/\n            initialize_fragment_libraries\n        end\n\n        report_errors\n        return {} unless operations.running.present?\n\n        sorted_ops = sort_ops\n        prepare_materials(sorted_ops, composition)\n        sorted_ops.make\n\n        # TODO: create a MasterMix class that handles variables like this\n        #   should also handle MAKE_EXTRA calculations\n        stamp_columns = program.program_name == 'lib_qPCR2' ? 8 : nil\n        set_up_reactions(sorted_ops, composition, stamp_columns)\n\n        run_test_and_real(sorted_ops, program, stamp_columns)\n\n        if program.program_name == \"qPCR2\"\n            associate_barcodes(ops: sorted_ops, input_name: REVERSE_PRIMER, output_name: FRAGMENT)\n        elsif program.program_name =~ /$lib_/\n            associate_library_data(sorted_ops)\n        end\n\n        associate_bins(ops: sorted_ops, input_name: TEMPLATE, output_name: FRAGMENT)\n        associate_volumes(ops: sorted_ops, output_name: FRAGMENT, volume: composition.volume)\n\n        sorted_ops.each { |op| op.output(FRAGMENT).item.move(NGS_BOX_NAME) }\n\n        pcr_cleanup\n        operations.store\n\n        # remaining_primers = check_primer_volumes(FORWARD_PRIMER, REVERSE_PRIMER)\n        check_primer_volumes(sorted_ops, FORWARD_PRIMER, REVERSE_PRIMER)\n\n        display_output_table(sorted_ops)\n\n        get_protocol_feedback\n\n        display_mapping(TEMPLATE, FRAGMENT, sorted_ops) if debug\n\n        return {}\n    end\n\n    # Validates operations\n    # Checks to see that there is only one qPCR program\n    # Checks to see that there are not more than MAX_OPS operations\n    # If either of these is true, then errors ALL the operations\n    #\n    # @return [String] the program name shared by all the operations\n    def validate_operations\n        ops_by_program = group_ops_by_parameter(PROGRAM, operations)\n\n        msg = nil\n\n        if ops_by_program.length != 1\n            programs = ops_by_program.keys.join(\", \")\n            msg = \"Job contains Operations with more than one program (#{programs}).\"\n            msg += \" Please replan.\"\n        elsif operations.length \u003e MAX_OPS\n            msg = \"Max number of ops is #{MAX_OPS} for a single Job.\"\n            msg += \" You have #{operations.length} ops. Please replan.\"\n        elsif ops_by_program.keys.first == \"lib_qPCR2\" \u0026\u0026 operations.length \u003e 12\n            msg = \"lib_qPCR2 program is limited to 12 reactions.\"\n            msg += \" You have #{operations.length} ops. Please replan.\"\n        end\n\n        if msg.present?\n            operations.each do |op|\n                op.error :job_failed_validation, msg\n            end\n        end\n\n        ops_by_program.keys.first\n    end\n\n    # Finds data for setting up FragmentLibrary objects and initializes them\n    # Attaches a FragmentLibrary to each Operation through its `temporary` variable\n    #\n    def initialize_fragment_libraries\n        operations.each do |op|\n            fragment_library = FragmentLibrary.new(\n                known_item: op.input(TEMPLATE).item,\n                sample: op.output(FRAGMENT).sample\n            )\n            fragment_library.detect_provenance\n            fragment_library.detect_oligo_pools\n\n            fragment_library.set_primers(\n                forward_primer: op.input(FORWARD_PRIMER).sample,\n                reverse_primer: op.input(REVERSE_PRIMER).sample\n            )\n\n            if fragment_library.errors.present?\n                fragment_library.errors.each { |k,v| op.error(k,v) }\n            else\n                op.temporary[:fragment_library] = fragment_library\n            end\n        end\n    end\n\n    # Groups operations by parameter value\n    #\n    # @param handle [String] handle of the parameter\n    # @param ops [OperationList] operations to be grouped\n    # @return [Hash]\n    def group_ops_by_parameter(handle, ops)\n        ops.group_by { |op| op.input(handle).val }\n    end\n\n    # Sorts running operations by REVERSE_PRIMER and TEMPLATE\n    #\n    # @return [OperationList]\n    def sort_ops\n        operations.running.sort_by { |op| sort_array(op) }.extend(OperationList)\n    end\n\n    # Provides attributes for and Operation in the form of an Array\n    #\n    # @param op [Operation]\n    # @return [Array]\n    def sort_array(op)\n        [op.input(REVERSE_PRIMER).sample.name, op.input(TEMPLATE).item.id]\n    end\n\n    # Provisions all materials required for the protocol, and instructs the technician\n    #   to retrieve them\n    #\n    # @param ops [OperationList]\n    # @param composition [PCRComposition]\n    # @todo Make this deal better with primers that are in collections\n    #   e.g., \"take\" and \"release\" are used in place of .retrieve and .store so\n    #   that sub-plate items are not retrieved or stored individually\n    def prepare_materials(ops, composition)\n        # ops.each do |op|\n        #     add_hidden_input(op, DYE_SAMPLE, dye)\n        #     add_hidden_input(op, POLYMERASE_SAMPLE, polymerase)\n        # end\n\n        templates = ops.map { |op| op.input(TEMPLATE).item }\n\n        fwd_primers = get_primer_set(ops, FORWARD_PRIMER)\n        rev_primers = get_primer_set(ops, REVERSE_PRIMER)\n\n        items_to_take = [templates, fwd_primers, rev_primers]\n\n        if composition.polymerase.item\n            items_to_take \u003c\u003c composition.polymerase.item\n        end\n\n        if composition.dye.item\n            items_to_take \u003c\u003c composition.dye.item\n        end\n\n        take(items_to_take.flatten, interactive: true, method: 'boxes')\n\n        vortex_samples([fwd_primers, rev_primers, templates])\n    end\n\n    # Finds and returns a list of all Primers used across all Operations\n    #\n    # @param ops [OperationList]\n    # @param handle [String]\n    # @return [Array\u003cItem\u003e]\n    def get_primer_set(ops, handle)\n        # primers - need to find the collection if the Primer is a sub-item\n        primers = ops.map do |op|\n            if op.input(handle).object_type.name == SUB_ITEM\n                Item.find(op.input(handle).item.get(\"collection\"))\n            else\n                op.input(handle).item\n            end\n        end\n\n        primers.uniq\n    end\n\n    # Vortexes and spins down samples before use\n    #\n    # @param all_items [Array\u003cItem\u003e] array of items to vortex and spin down\n    def vortex_samples(all_items)\n        all_items = all_items.flatten.uniq\n        collections, non_collections = all_items.partition { |it| it.collection? }\n\n        show do\n            title \"Vortex and Spin Down\"\n\n            note \"Briefly vortex and spin down all items in 1.5 ml tubes\"\n            if collections.any?\n                note \"Centrifuge the following plates for #{qty_display(SPIN_TIME)} at #{qty_display(SPIN_RPM)}: #{collections.to_sentence}\"\n                warning \"Please balance the centrifuge\"\n            end\n        end\n    end\n\n    # Sets up and dispenses master mixes, primers, templates\n    # Splits into TEST and REAL reactions\n    #\n    # @param ops [OperationList]\n    # @param composition [PCRComposition]\n    # @param stamp_columns [Numeric, Boolean] can be either a number of replicates of\n    #   each reaction (stamps) or a Boolean. If merely true, then defaults to\n    #   the `DEFAULT_STAMP_COLUMNS` number of replicates\n    def set_up_reactions(ops, composition, stamp_columns=nil)\n        mult = MAKE_EXTRA\n\n        if stamp_columns\n            stamp_columns = DEFAULT_STAMP_COLUMNS unless stamp_columns.is_a?(Numeric)\n            stamp_columns = stamp_columns.to_i\n            mult *= (1 + stamp_columns)\n        else\n            mult *= 2\n        end\n\n        prepare_stripwells(FRAGMENT, ops, stamp_columns)\n\n        input_names = [FORWARD_PRIMER, REVERSE_PRIMER, TEMPLATE]\n        group_input_names, grouped_ops = group_ops_by_inputs(input_names: input_names, ops: ops)\n        inputs_not_added = input_names - group_input_names\n\n        ops_by_master_mix = make_master_mixes(\n            grouped_ops: grouped_ops,\n            input_names: group_input_names,\n            composition: composition,\n            mult: mult\n        )\n\n        dispense_master_mix(\n            output_name: FRAGMENT,\n            ops_by_master_mix: ops_by_master_mix,\n            composition: composition,\n            mult: stamp_columns ? mult : 2\n        )\n\n        ops_by_master_mix.values.each do |ops|\n            inputs_not_added.each do |input_name|\n                dispense_component(\n                    input_name: input_name,\n                    output_name: FRAGMENT,\n                    ops: ops,\n                    composition: composition,\n                    mult: stamp_columns ? mult : 2\n                )\n            end\n        end\n\n        split_reactions(FRAGMENT, ops, composition, stamp_columns)\n    end\n\n    # Prepares stripwells for qPCR\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param stamp_columns [FixNum, Boolean] can be either a number of replicates of\n    #   each reaction (stamps) or a Boolean.\n    def prepare_stripwells(outname, ops, stamp_columns)\n        coll = ops.first.output(outname).collection # get collection item\n        tab = display_plate(outname, ops, stamp_columns)\n        show do\n            title \"Prepare Stripwells\"\n            check \"Get two holders for 96 stripwells\"\n            check \"Label the holders \u003cb\u003e#{coll}-#{TEST}\u003c/b\u003e and \u003cb\u003e#{coll}-#{REAL}\u003c/b\u003e\"\n            note \"These are for \u003cb\u003e#{TEST}\u003c/b\u003e and \u003cb\u003e#{REAL}\u003c/b\u003e qPCR runs\"\n\n            if stamp_columns.is_a?(Numeric) \u0026\u0026 stamp_columns \u003e 1\n                warning \"Each column is #{stamp_columns} identical reactions\"\n            end\n\n            check \"Get white stripwells with connected transparent caps\"\n            note \"Arrange a set of stripwells in each holder and label their \u003cb\u003esides\u003c/b\u003e as follows:\"\n            table tab\n        end\n    end\n\n    # Splits reactions into REAL and TEST tubes\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param program [String] the qPCR program\n    def split_reactions(outname, ops, composition, stamp_columns)\n        coll = ops.first.output(outname).collection\n\n        step_1 = \"Place \u003cb\u003e#{coll}-#{TEST}\u003c/b\u003e and \u003cb\u003e#{coll}-#{REAL}\u003c/b\u003e\"\n        step_1 += \" in the same orientation on the bench\"\n\n        if stamp_columns.is_a?(Numeric) \u0026\u0026 stamp_columns \u003e 1\n            step_2 = \"Transfer \u003cb\u003e#{composition.qty_display}\u003c/b\u003e of\"\n            step_2 += \" reaction mix from each microfuge tube\"\n            step_2 += \" to the corresponding tube in\"\n            step_2 += \" \u003cb\u003e#{coll}-#{TEST}\u003c/b\u003e\"\n\n            step_3 = \"Transfer \u003cb\u003e#{stamp_columns} #{composition.qty_display} aliquots\u003c/b\u003e of\"\n            step_3 += \" reaction mix from each microfuge tube\"\n            step_3 += \" to the corresponding \u003cb\u003ecolumn\u003c/b\u003e in\"\n            step_3 += \" \u003cb\u003e#{coll}-#{REAL}\u003c/b\u003e\"\n        else\n            step_2 = \"Transfer \u003cb\u003e#{composition.qty_display}\u003c/b\u003e of\"\n            step_2 += \" reaction mix from each tube in\"\n            step_2 += \" \u003cb\u003e#{coll}-#{TEST}\u003c/b\u003e to the corresponding tube in\"\n            step_2 += \" \u003cb\u003e#{coll}-#{REAL}\u003c/b\u003e\"\n\n            step_3 = \"\"\n        end\n\n        show do\n            title \"Split Reactions\"\n            check step_1\n            check step_2\n            check step_3 if step_3.present?\n        end\n    end\n\n    # Runs both qPCRs, uploads and parses run data\n    #\n    # @param ops [OperationList]\n    # @param program [String]\n    def run_test_and_real(ops, program, stamp_columns=nil)\n        run_qpcr(FRAGMENT, ops, program, TEST, stamp_columns)\n        csv_upload = upload_data(FRAGMENT, ops, program, TEST)\n        find_stop_cycles(FRAGMENT, ops, csv_upload)\n        separate_tubes(FRAGMENT, ops, REAL, stamp_columns)\n        run_qpcr(FRAGMENT, ops, program, REAL, stamp_columns)\n        upload_data(FRAGMENT, ops, program, REAL)\n    end\n\n    # Runs qPCR program for operations using program\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param program [String] the qPCR program\n    # @param test_str [String] typically 'TEST' or 'REAL', info related to qPCR run\n    def run_qpcr(outname, ops, program, test_str, stamp_columns)\n        coll = ops.first.output(outname).collection\n\n        display_plate = display_plate(outname, ops, stamp_columns)\n        stub = upload_stub(program, test_str)\n\n        show do\n            title \"Place #{test_str} stripwells in qPCR machine\"\n            check \"Open #{SOFTWARE} on qPCR computer and make sure the qPCR is not running\"\n            note \"Open lid\"\n            note \"Place the \u003cb\u003e#{coll}-#{test_str}\u003c/b\u003e stripwells in the block in the following order\"\n            table display_plate\n            note \"Close lid\"\n        end\n\n        show do\n            title \"Program Setup: #{stub}\"\n            check \"Open #{SOFTWARE} if not already open\"\n            check \"Choose \u003cb\u003eFile-\u003eOpen-\u003eProtocol\u003c/b\u003e\"\n            if stub == \"qPCR1_REAL\"\n                check \"Navigate to \u003cb\u003e#{PROG_DIR}\u003c/b\u003e and select \u003cb\u003eNGS_qPCR1_2.prcl\u003c/b\u003e\"\n            else \n                check \"Navigate to \u003cb\u003e#{PROG_DIR}\u003c/b\u003e and select \u003cb\u003e#{program.name}\u003c/b\u003e\"\n            end\n            note \"Your program should have the following steps. If not, notify a lab manager.\"\n            table program.table\n            check \"Set the \u003cb\u003eSample Volume\u003c/b\u003e to \u003cb\u003e#{program.volume}\u003c/b\u003e\"\n            check \"Press \u003cb\u003eOK\u003c/b\u003e (in the #{SOFTWARE})\"\n        end\n\n        show do\n            title \"Plate Setup: #{stub}\"\n            check \"Press \u003cb\u003eNext\u003c/b\u003e. You are now on the \u003cb\u003ePlate\u003c/b\u003e tab. Press \u003cb\u003eSelect Existing\u003c/b\u003e.\"\n            check \"Navigate to \u003cb\u003e#{PROG_DIR}\u003c/b\u003e. Choose \u003cb\u003e#{program.plate}\u003c/b\u003e and press \u003cb\u003eOpen\u003c/b\u003e.\"\n            check \"Press \u003cb\u003eEdit Selected\u003c/b\u003e. Make sure the occupied wells match the table below:\"\n            table display_plate\n            check \"Make sure \u003cb\u003eSYBR\u003c/b\u003e is checked for all wells in the table\"\n            check \"Press \u003cb\u003eOK\u003c/b\u003e (n the #{SOFTWARE})\"\n        end\n\n        data = show do\n            title \"Run: #{stub}\"\n            check \"Press \u003cb\u003eNext\u003c/b\u003e. You are now on the \u003cb\u003eStart Run\u003c/b\u003e tab.\"\n            check \"Press \u003cb\u003eStart Run\u003c/b\u003e\"\n            note \"Copy the auto-generated filename for the run and paste it below:\"\n            get \"text\", var: :name, label: \"file name\", default: \"filename#{PCRD_SUFFIX}\"\n            if(test_str == TEST)\n                check \"Proceed immediately to the next step while you are waiting for the qPCR \u003cb\u003e#{test_str}\u003c/b\u003e run to finish\"\n            end\n        end\n\n        ops.first.plan.associate \"#{upload_stub(program, test_str)}_name\", data[:name]\n\n        if(test_str == REAL) # display stop cycle\n            stop_cycle = ops.first.output(outname).collection.get(\"stop_cycle\")\n\n            if stop_cycle.present?\n                msg = \"The qPCR samples each require a different number of cycles.\"\n                msg += \" To acheive this without disrupting the run, you will press\"\n                msg += \" on the \u003cb\u003ePause\u003c/b\u003e software button at the \u003cb\u003eend\u003c/b\u003e of the\"\n                msg += \" elongation step at each of the cycles:\"\n                msg += \" \u003cb\u003e#{stop_cycle.flatten.uniq.select!{|i| i\u003e0}.sort.to_sentence}\u003c/b\u003e\"\n                msg += \" and remove the relevant sample(s), as indicated in the following table:\"\n\n                show do\n                    title \"Stop at Cycle\"\n                    note msg\n                    table display_stop_cycles(outname, ops, stamp_columns)\n                end\n            else # this should not happen!\n                raise \"No stop cycle info found.\"\n            end\n        end\n\n    end\n\n    # Uploads .pcrd and .csv file and returns .csv upload (both are associated to plan)\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param program [String] the qPCR program\n    # @param test_str - typically 'TEST' or 'REAL', info related to qPCR run (enables differentiation between multiple associations in the same plan)\n    # @return csv_upload - upload hash of .csv file (y/n .csv is not verified by function)\n    def upload_data(outname, ops, program, test_str)\n        plan = ops.first.plan\n        coll = Item.find(ops.first.output(outname).collection)\n        stub = upload_stub(program, test_str)\n\n        show do\n            title \"Save data: #{stub}\"\n            note \"When qPCR reaches #{program.final_step}, stop run\"\n            note \"Export the current run in csv format to \u003cb\u003e#{EXPORT_DIR}\u003c/b\u003e, as follows:\"\n            check \"Delete any existing files in \u003cb\u003e#{EXPORT_DIR}\u003c/b\u003e\"\n            check \"In the #{SOFTWARE}, press \u003cb\u003eExport-\u003eExport all data sheets-\u003ecsv\u003c/b\u003e, and save to \u003cb\u003e#{EXPORT_DIR}\u003c/b\u003e\"\n            note \"You will now be asked to upload specific files\"\n        end\n\n        # upload .csv of fluorescence per cycle (used for stop-cycle detection)\n        csv_name = plan.get(\"#{stub}_name\").gsub(PCRD_SUFFIX,CSV_SUFFIX)\n        csvs = uploadData(\"#{EXPORT_DIR}/#{csv_name}\", 1, 3)\n        csv_upload = nil\n        if csvs.present?\n            plan.associate \"#{stub}_csv\", \"#{stub}\", csvs[0] # upload\n            coll.associate \"#{stub}_csv\", csvs[0] # regular association\n            csv_upload = csvs[0]\n        end\n\n        # upload .pcrd\n        ups = uploadData(\"#{BASE_DIR}/#{plan.get(\"#{stub}_name\")}\", 1, 3)\n        if(!ups.nil?)\n            plan.associate \"#{stub}_data\", \"#{stub}\", ups[0] # upload\n            coll.associate \"#{stub}_data\", ups[0] # regular association\n        end\n\n        return csv_upload\n    end\n\n    def upload_stub(program, test_str)\n        \"#{program.program_name}_#{test_str}\"\n    end\n\n    # Finds stop cycle for REAL run from TEST run and associates to collection\n    # Assumes all operations in ops are in the same collection\n    # Algorithm - max in diff of data (right edge)\n    # If algorithm fails, protocol asks that stop cycles be entered manually.\n    #\n    # @param outname [String] name of output collection\n    # @param ops [OperationList] operations\n    # @param program [String] program\n    # @param up - upload hash of data file that contains the TEST run data used for calculation of the stop cycle (XXX - Quantification Amplification Results_SYBR.csv)\n    def find_stop_cycles(outname, ops, up)\n        stop_cycle = Array.new(8){Array.new(12, 0)} # stop_cycle(i,j) is stop cycle for collection item (i,j)\n        outcol = ops.first.output(outname).collection # same collection for all ops\n\n        mismatch = false # mismatch between collection, stop_cycle data\n\n        # attempt to find stop cycle\n        if(!up.nil?)\n            data = read_url(up) # get data\n            if(!data.empty?)\n                # knock of first row and first 2 columns, leaving transposed so each col is now a row. (see format of XXX - Quantification Amplification Results_SYBR.csv)\n                row_offset = 1\n                col_offset = 2\n                dataArray = data[row_offset..-1].transpose[col_offset..-1]\n                dataArray.each_with_index { |col, ind|  # column of ORIGINAL data\n                    diff = col.each_cons(2).map { |a,b| b.to_f - a.to_f } # difference of each consecutive 2 elements\n                    maxind = diff.each_with_index.max[1] + 2 # returns index of max value in diff, + 1 for right edge, + 1 for a little extra\n                    col_str = data[0][ind+col_offset] # well label, e.g. \"A1\"\n                    mymatch = /(?\u003cmyrow\u003e[A-H]{1,1})(?\u003cmycol\u003e[0-9]{1,2})/.match(col_str)\n                    if(!mymatch.nil?)\n                        rr = (mymatch[:myrow].ord-\"A\".ord).to_i    # subtract ascii value of \"A\" from A-H to get row integer, 0-7\n                        cc = mymatch[:mycol].to_i-1                # col integer, 0-11\n                        if(outcol.matrix[rr][cc] \u003e 0) # collection item exists for this (rr,cc)\n                            stop_cycle[rr][cc] = maxind\n                        else\n                            show { note \"stop_cycle indices (#{rr},#{cc}) do not match collection!\" } if debug\n                            mismatch = true\n                        end\n                    end\n                }\n\n                num_stop_samples = outcol.matrix.flatten.map{|x| x\u003e0 ? 1:0}.sum\n                num_collection_samples = stop_cycle.flatten.map{|x| x\u003e0 ? 1:0}.sum\n                show { note \"HAVE DATA from test run. match = #{mismatch}, num_stop_samples = #{num_stop_samples}, num_collection_samples = #{num_collection_samples}\" } if debug\n\n                # associate stop cycles to collection item\n                if( !mismatch || (num_stop_samples == num_collection_samples) ) # 1:1 correlation between collection, stop_cycle indices\n                    Item.find(outcol.id).associate \"stop_cycle\", stop_cycle\n                end\n\n            else\n                show { note \"problem: data.empty? = #{data.empty?}\" } if debug\n            end\n\n        else\n            show { note \"problem: up.nil? = #{up.nil?}\" } if debug\n        end\n\n        # something went wrong, need manual entry of stop_cycles\n        if(Item.find(outcol.id).get(\"stop_cycle\").nil?)\n            show {\n                title \"Enter Stop Cycles for #{REAL} run manually\"\n                table ops.start_table\n                  .output_collection(outname, heading: outname)\n                  .custom_column(heading: \"Plate position\", checkable: true) { |op| \"#{(op.output(outname).row + \"A\".ord).chr}#{op.output(outname).column + 1}\" }\n                  .get(:stop, type: 'number', heading: 'Stop qPCR at this cycle', default: 0)\n                  .end_table\n            }\n            # associate manually-entered stop cycles to collection item\n            ops.each { |op|\n                stop_cycle[op.output(outname).row][op.output(outname).column] = op.temporary[:stop].round\n            }\n            Item.find(outcol.id).associate \"stop_cycle\", stop_cycle\n        end\n\n        if(debug)\n            ops.each { |op|\n                stop_cycle[op.output(outname).row][op.output(outname).column] = 5+rand(5).round\n            }\n            Item.find(outcol.id).associate \"stop_cycle\", stop_cycle\n        end\n\n    end\n\n    # Separates single wells for individual extraction while qPCR is running\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param test_str [String] typically 'TEST' or 'REAL', info related to qPCR run\n    def separate_tubes(outname, ops, test_str, stamp_columns)\n        stop_cycles_tab = display_stop_cycles(outname, ops, stamp_columns)\n        wells_tab = display_plate(outname, ops, stamp_columns)\n        coll = ops.first.output(outname).collection # get collection item\n\n        show do\n            title \"Separate #{test_str} stripwell tubes\"\n            note \"During the \u003cb\u003e#{REAL}\u003c/b\u003e qPCR run, you will need to remove single wells when different cycles are reached, according to the following:\"\n            table stop_cycles_tab\n            check \"Get a scissors and carefully separate the wells of \u003cb\u003e#{coll}-#{test_str}\u003c/b\u003e\"\n            check \"Verify that the separated wells are in the correct order:\"\n            table wells_tab\n        end\n    end\n\n    def associate_library_data(ops)\n        ops.each do |op|\n            program = op.input(PROGRAM).val\n            fragment_library = op.temporary[:fragment_library]\n            output_item = op.output(FRAGMENT).part\n\n            output_item.associate(:template_id, op.input(TEMPLATE).sample.id)\n            output_item.associate(:forward_primer_id, op.input(FORWARD_PRIMER).sample.id)\n            output_item.associate(:reverse_primer_id, op.input(REVERSE_PRIMER).sample.id)\n            output_item.associate(:variants, fragment_library.variants)\n        end\n    end\n\n    # Cleanup\n    def pcr_cleanup\n        show do\n            title \"Cleanup\"\n            check \"Remove samples from the qPCR and stop the #{SOFTWARE}\"\n            check \"Trash all \u003cb\u003eMM\u003c/b\u003e tubes\"\n            check \"Trash all \u003cb\u003e#{TEST}\u003c/b\u003e stripwell tubes\"\n            warning \"Keep \u003cb\u003e#{REAL}\u003c/b\u003e tubes on bench for next protocol!\"\n        end\n    end\n\n    # Checks volumes of primer aliquots after use, before store\n    # Deletes empty aliquots\n    # OF for primers in plates\n    #\n    # @param ops [OperationList]\n    # @param fwdname [String]\n    # @param revname [String]\n    def check_primer_volumes(ops, fwdname, revname)\n        items_to_check = ops.map { |op| op.input(fwdname).item }.uniq\n        items_to_check += ops.map { |op| op.input(revname).item }.uniq\n\n        show do\n            title \"Check the remaining volume of the primers\"\n\n            check \"Check the remaining volume in primer items #{items_to_check.to_sentence}\"\n            warning \"Notify a lab manager if there is less than #{qty_display(MIN_VOL)} left for any of the primers\"\n        end\n    end\n\n    # Checks volumes of primer aliquots after use, before store\n    # Deletes empty aliquots\n    # OF for primers in plates\n    #\n    # @param fwdname [String]\n    # @param revname [String]\n    # @return [Array] items for primers with non-zero volume\n    # def check_primer_volumes(fwdname, revname)\n    #     remaining_primers = nil\n\n    #     show do\n    #         title \"Check the remaining volume of the primers\"\n\n    #         table operations.uniq { |op| op.input(fwdname).item }.extend(OperationList).start_table\n    #             .custom_column(heading: \"Location\") { |op| coll_id_display(op, fwdname) }\n    #             .get(:have_fwd_volume, heading: \"Is there more than #{MIN_VOL[:qty]} #{MIN_VOL[:units]} left?\", type: \"text\", default: \"Y\")\n    #             .end_table\n\n    #         table operations.uniq { |op| op.input(revname).item }.extend(OperationList).start_table\n    #             .custom_column(heading: \"Location\") { |op| coll_id_display(op, revname) }\n    #             .get(:have_rev_volume, heading: \"Is there more than #{MIN_VOL[:qty]} #{MIN_VOL[:units]} left?\", type: \"text\", default: \"Y\")\n    #             .end_table\n    #     end\n\n    #     # for debug - assign responses\n    #     # if(debug)\n    #     #     operations.each { |op|\n    #     #         op.temporary[:have_fwd_volume] = ANSWERS.rotate!.first # \"Y\" or \"N\"\n    #     #         op.temporary[:have_rev_volume] = ANSWERS.rotate!.first # \"Y\" or \"N\"\n    #     #     }\n    #     # end\n\n    #     # find empty Primer Aliquot, Collection items\n    #     fwd_empty = operations.select{|o| (o.temporary[:have_fwd_volume] == \"N\") }.map { |op| op.input(fwdname).item }\n    #     rev_empty = operations.select{|o| (o.temporary[:have_rev_volume] == \"N\") }.map { |op| op.input(revname).item }\n    #     trash_items = [fwd_empty,rev_empty].flatten.uniq\n    #     trash_colls = []  # collection items to be trashed\n\n    #     if(!trash_items.empty?)\n    #         trash_items.each { |it|\n    #             if(it.object_type.name == SUB_ITEM) # need to remove deleted item and check collection for remaining items\n    #                 coll = Collection.find(it.get(\"collection\"))\n    #                 locs = Matrix[*(coll.matrix)].index(it.id)  # find position of item in collection matrix, returns array with [row,col]\n    #                 if(!locs.nil?)\n    #                     coll.matrix[locs[0]][locs[1]] = -1\n    #                     coll.save\n    #                     if( (coll.matrix.flatten.select { |well| well\u003e0 }.count) == 0 ) # no items left in collection matrix\n    #                         trash_colls.push(coll) # collection items to be trashed\n    #                         coll.mark_as_deleted   # delete collection\n    #                     end\n    #                 else # should not happen!!! will show up in test mode because the assignment of collections is fake\n    #                     show { warning \"Please notify a lab manager that you could not find the location of #{it} in #{coll}!\" }\n    #                 end\n\n    #             end\n    #             it.mark_as_deleted # delete item\n    #         }\n    #         show {\n    #             title \"Trash empty Primer items\"\n    #             note \"Trash primer aliquots #{trash_items.select{ |it| !(it.object_type.name == SUB_ITEM) }.to_sentence}\" # can't trash parts of a plate\n    #             if(!trash_colls.empty?)\n    #                 note \"Trash primer plates #{trash_colls.to_sentence}\"\n    #             end\n    #         }\n    #     end\n\n    #     # remaining primers (to be stored)\n    #     fwd_primers = operations.select{|o| !(o.temporary[:have_fwd_volume] == \"N\") }.map { |op|\n    #         (op.input(fwdname).object_type.name == SUB_ITEM) ? Item.find(op.input(fwdname).item.get(\"collection\")) : op.input(fwdname).item }\n\n    #     rev_primers = operations.select{|o| !(o.temporary[:have_rev_volume] == \"N\") }.map { |op|\n    #         (op.input(revname).object_type.name == SUB_ITEM) ? Item.find(op.input(revname).item.get(\"collection\")) : op.input(revname).item }\n\n    #     remaining_primers = [fwd_primers, rev_primers].flatten.uniq\n\n    #     return remaining_primers\n\n    # end\n\n    # Adds volumes to parts associated with the output collections\n    #\n    # @param ops [OperationList]\n    # @param output_name [String]\n    # @param volume [FixNum, Float, String]\n    def associate_volumes(ops:, output_name:, volume:)\n        ops.each do |op|\n            op.output(output_name).part.associate(:volume, volume)\n        end\n    end\n\n    def display_output_table(ops)\n        # display table for lab manager (to cut and paste for NGS record)\n        show do\n            title \"List of qPCR fragments\"\n            table ops.start_table\n                .input_item(TEMPLATE)\n                .custom_column(heading: \"name\") { |op| op.input(TEMPLATE).sample.name }\n                .custom_column(heading: \"bin\") { |op| bin_display(op: op, input_name: TEMPLATE) }\n                .custom_column(heading: \"qPCR program\") { |op| op.input(PROGRAM).val }\n                .custom_column(heading: \"Illumina index\") { |op| \"\u003cpre\u003e#{op.output(FRAGMENT).part.get(:barcode)}\u003c/pre\u003e\" }\n                .end_table\n        end\n    end\n\n    # Displays mapping between input and output items\n    #\n    # @param inname [String] input name\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    def display_mapping(inname, outname, ops)\n        show do\n            title \"mapping\"\n            table ops.start_table\n                .output_item(outname)\n                .input_item(inname)\n                .custom_column(heading: \"Volume\") { |op| op.output(FRAGMENT).part.get(:volume) }\n                .end_table\n        end\n    end\n\n    # Creates table with the stop cycles defined for samples in output collection\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param program [String] the qPCR program\n    # @return tab - table containing stop cylces (to be used in show block)\n    def display_stop_cycles(outname, ops, stamp_columns)\n        tab = Array.new(8) { Array.new(12, \"-\") }\n        stop_cycle = ops.first.output(outname).collection.get(\"stop_cycle\")\n\n        if stop_cycle.present?\n            stop_cycle[0].length.times do |cc|\n                col = cc+1\n                if stamp_columns\n                    if(stop_cycle[0][cc]\u003e0)\n                        tab[0][cc] = {content: \"A#{col} cycle #{stop_cycle[0][cc]}\", check: \"true\"}\n                        (1..stamp_columns - 1).each do |rr|\n                            row = (rr+\"A\".ord).chr\n                            tab[rr][cc] = {content: \"cycle #{stop_cycle[0][cc]}\", check: \"false\"} # wells are connected\n                        end\n                    end\n                else\n                    stop_cycle.length.times { |rr|\n                        if(stop_cycle[rr][cc]\u003e0)\n                            row = (rr+\"A\".ord).chr\n                            tab[rr][cc] = {content: \"#{row}#{col} cycle #{stop_cycle[rr][cc]}\", check: \"true\"}\n                        end\n                    }\n                end\n            end\n        end\n\n        return tab\n    end\n\n    # Displays id / position for items that may be sub-items in collections\n    #\n    # @param op [Operation]\n    # @param handle [String] input or output name\n    # @param role [String] \"input\" or \"output\"\n    # @param hide_id [Boolean] whether to include the Collection ID\n    # @return [String] Item ID followed by location if a collection\n    def coll_id_display(op, handle, role='input', hide_id=false)\n        if role == 'input'\n            fv = op.input(handle)\n        elsif role == 'output'\n            fv = op.output(handle)\n        else\n            raise \"Unrecognized role: #{role}\"\n        end\n\n        display = hide_id ? \"\" : fv.item.to_s\n\n        if fv.item.collection?\n            row, col = fv.row, fv.column\n\n            unless row \u0026\u0026 col\n                row, col = fv.collection.find(fv.sample).first\n            end\n\n            display += \" #{well_pos_display(row, col)}\"\n        end\n\n        display.strip\n    end\n\n    def well_pos_display(row, col)\n        alpha_r = ('A'..'H').to_a\n        \"#{alpha_r[row]}#{col + 1}\"\n    end\n\n    # Creates table of output locations in 96-well format\n    #\n    # @param outname [String] output name\n    # @param ops [OperationList] operations\n    # @param stamp_columns [String] make all 8 reactions in a column the same\n    # @return [Array] 2D Array containing locations to be used in show block\n    def display_plate(outname, ops, stamp_columns=false)\n        plate = Array.new(8) { Array.new(12, \"-\") }\n        if stamp_columns\n            ops.each do |op|\n                col = op.output(outname).column\n                background = BACKGROUND_COLORS[col]\n                content = \"#{(\"A\".ord.to_i).chr}#{col+1}\"\n                plate[0][col] = {content: content, style: {background: background} }\n                (1..stamp_columns - 1).each do |row|\n                    plate[row][col] = { content: \" \", style: { background: background } }\n                end\n            end\n        else\n            ops.each do |op|\n                row = op.output(outname).row\n                col = op.output(outname).column\n                plate[row][col] = {content: \"#{(row + \"A\".ord.to_i).chr}#{col+1}\", style: {background: BACKGROUND_COLORS[0] }  }\n            end\n        end\n\n        return plate\n    end\n\nend"}},{"library":{"name":"CollectionDisplay","category":"Tissue Culture Libs","code_source":"module CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: 'td-empty-slot'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: 'td-filled-slot', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, \u0026rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, \u0026rc_block)\n    highlight_rc collection, collection.get_non_empty, \u0026rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, \u0026fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = ('A'..'H').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: 'td-empty-slot'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, \u0026rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, \u0026rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, \u0026rc_block\n    end\n      \nend"}},{"library":{"name":"YeastDisplayHelper","category":"Yeast Display","code_source":"needs 'Standard Libs/CommonInputOutputNames'\nneeds \"Standard Libs/Units\"\nneeds \"Standard Libs/TemporaryTubeLabels\"\nneeds \"Yeast Display/YeastDisplayShows\"\n\nmodule YeastDisplayHelper\n\n    include CommonInputOutputNames, Units, TemporaryTubeLabels\n    include YeastDisplayShows\n\n    ADD_WASH_BUFFER = \"Add %{qty} %{units} of chilled quench buffer to each tube according to the table.\"\n    VORTEX_CELLS = 'After adding buffer, vortex each tube for 3 pulses.'\n    SPIN_CELLS = 'Spin 1 min at 5000 x g in a 4 °C microcentrifuge.'\n    REMOVE_BUFFER = 'Aspirate off the buffer without disturbing the cell pellet.'\n    LABEL_TUBES_FROM_TABLE = 'Label the tubes and add the reagent volumes as indicated'\n\n    ROOM_TEMP = { style: 'bg-color: lightorange', temp: 'AT ROOM TEMPERATURE' }\n    ON_ICE = { style: 'bg-color: powderblue', temp: 'ON ICE' }\n\n    INCUBATOR = \"30 °C shaker incubator\"\n\n    def prepare_media_and_dilute(container, container_group, protocol=:yeast_display)\n        container_group.extend(OperationList)\n\n        language = container_specific_language(protocol, container)\n\n        if container == \"Labeled Yeast Library Suspension\"\n            get_media(container_group)\n        else\n            prepare_media(container_group, language)\n        end\n\n        innoculate_flasks(container_group, language)\n    end\n\n    def group_ops_by_container\n        ops_by_container = operations.group_by { |op| container_name(op) }\n        ops_by_container.each_value { |ops_group| ops_group.extend(OperationList) }\n        ops_by_container\n    end\n\n    def container_name(op, handle=INPUT_YEAST)\n        op.input(handle).object_type.name\n    end\n\n    def media_volume(op, handle=INPUT_YEAST)\n        op.input(handle).item.associations[:media_vol]\n    end\n\n    def transfer_volume(op, handle=INPUT_YEAST)\n        op.input(handle).item.associations[:txfr_vol]\n    end\n\n    def temp_instructions(substitutions)\n        \"\u003cspan style=\\\"%{style}\\\"\u003eKEEP TUBES AND BUFFERS \u003cb\u003e%{temp}\u003c/b\u003e\u003c/span\u003e\" % substitutions\n    end\n\n    def materials_prep_temp(substitutions)\n        \"\u003cspan style=\\\"%{style}\\\"\u003eThese materials should be placed \u003cb\u003e%{temp}\u003c/b\u003e\u003c/span\u003e\" % substitutions\n    end\n\n    def set_unique_items(handle)\n        donor = operations.first.input(handle)\n        operations.each { |op| op.input(handle).set( { item: donor.item }) }\n    end\n\n    def container_specific_language(protocol, container)\n        case protocol\n\n        when :yeast_display\n            yeast_display_containers(container)\n\n        when :library_transformation\n            library_transformation_containers(container)\n\n        else\n            raise \"Unrecognized Protocol: #{protocol}.\"\n\n        end\n    end\n\n    def yeast_display_containers(container)\n        case container\n\n        when \"Yeast Library Glycerol Stock\"\n            {\n                flask_type: '250 ml baffled flask',\n                media_volume: '50 ml',\n                passage_amount: 'Pipette the entire glycerol stock of each input %{input_type} into the corresponding flask.'\n            }\n\n        when \"Labeled Yeast Library Suspension\"\n            {\n                flask_type: '15 ml culture tube',\n                media_volume: '5 ml',\n                passage_amount: 'Using a new 5 ml serological pipette for each sample, pipette %{media_volume} of media into each collection tube, pipette up and down a few times, then transfer to the corresponding culture tube.'\n            }\n\n        when \"Yeast Library Liquid Culture\", \"Yeast 5ml culture\", \"Yeast 50ml culture\"\n            {\n                flask_type: '250 ml baffled flask',\n                media_volume: '50 ml',\n                passage_amount: 'Pipette 1 ml of each input %{input_type} into the corresponding flask.'\n            }\n\n        when \"Yeast Plate\", \"Divided Yeast Plate\"\n            {\n                flask_type: '15 ml culture tube',\n                media_volume: '5 ml',\n                passage_amount: 'Pick 1 colony of each input %{input_type} into the corresponding flask.'\n            }\n\n        else\n            raise \"Unrecognized Container for Item in #{container}\"\n\n        end\n    end\n\n    def library_transformation_containers(container)\n        case container\n\n        when \"Yeast Plate\", \"Divided Yeast Plate\"\n            {\n                flask_type: '250 ml baffled flask',\n                media_volume: '50 ml',\n                passage_amount: 'Pick 1 colony of each input %{input_type} into the corresponding flask.'\n            }\n\n        when 'Yeast 50ml culture'\n            {\n                flask_type: '500 mL baffled flask',\n                media_volume: 'the indicated amount',\n                passage_amount: 'Pipette the indicated volume of each input %{input_type} into the corresponding flask.'\n            }\n\n        when '8 ml High Efficiency Transformation'\n            {\n                flask_type: '500 ml baffled flask',\n                media_volume: '92 ml',\n                passage_amount: 'Pipette the entire 8 ml of each input %{input_type} into the corresponding flask.'\n            }\n\n        else\n            raise \"Unrecognized Container for Item in #{container}\"\n\n        end\n    end\n\n    def mark_cultures_for_discard(culture_items)\n        culture_items.each { |item| item.move_to('Culture discard area') }\n\n        ids = culture_items.map { |item| item.to_s }\n        discard_date = (Date.today + 2).strftime(\"%-m/%-d/%y\")\n\n        show do\n            title \"Label cultures with discard date\"\n\n            note \"Label each of the cultures #{ids.to_sentence} with \\\"DISCARD ON #{discard_date}\\\"\"\n        end\n    end\n\n    def return_to_incubator\n        operations.each { |op| op.output(OUTPUT_YEAST).item.update_attributes(location: INCUBATOR) }\n    end\n\n    # Generates table for adding quench buffer to samples.\n    #\n    # @param ops [OperationList] usually a subset of the operations\n    # def quench_buffer_table(ops, output_handle)\n    #     ops.start_table\n    #         .custom_column(heading: \"Yeast library\") { |op| library_tube_label(op, output_handle) }\n    #         .custom_column(heading: \"Buffer\") { |op| quench_buffer(op)[:label] }\n    #         .end_table\n    # end\n\n    # Generates a table for adding wash buffer to the samples.\n    #\n    def wash_buffer_table(ops, args)\n        ops.start_table\n            .custom_column(heading: \"Sample\") { |op| sample_tube_label(op, args[:output_handle]) }\n            .custom_column(heading: \"Wash Buffer\") { |op| op.input(args[:buffer_handle]).sample.name }\n            .end_table\n    end\n\n    # Retrieve the antibody and dilute it to the appropriate concentration.\n    #\n    def prepare_reagent(args)\n        reagent_name = args[:reagent_name]\n        reagent_handle = args[:reagent_handle]\n        buffer_handle = args[:buffer_handle]\n        stock_per_rxn = args[:stock_per_rxn]\n        buffer_per_rxn = args[:buffer_per_rxn]\n        temperature = args[:temp] || ON_ICE\n\n        set_unique_items(reagent_handle) if args[:debug]\n\n        operations.retrieve(only: reagent_handle)\n\n        operations.each do |op|\n            op.temporary[:modified_buffer] = reagent_label(op, reagent_handle, buffer_handle)\n        end\n\n        ops_by_combo = operations.group_by { |op| op.temporary[:modified_buffer] }\n\n        # h1 = \"#{reagent_name.sub(/^./, \u0026:upcase)} volume (#{MICROLITERS})\"\n        # h2 = \"Buffer\"\n        # h3 = \"Buffer volume (#{MICROLITERS})\"\n        # h4 = \"Tube label\"\n\n        reagent_table = [[\n            \"#{reagent_name.sub(/^./, \u0026:upcase)}\",\n            \"Volume (#{MICROLITERS})\",\n            \"Buffer\",\n            \"Volume (#{MICROLITERS})\",\n            \"Tube label\"\n        ]]\n\n        ops_by_combo.each do |combo, ops|\n            op = ops[0]\n            row = [\n                op.input(reagent_handle).item.to_s,\n                { content: total_vol(stock_per_rxn, ops.length), check: true },\n                op.input(buffer_handle).sample.name,\n                { content: total_vol(buffer_per_rxn, ops.length), check: true },\n                op.temporary[:modified_buffer]\n            ]\n            reagent_table.append(row)\n        end\n\n        show do\n            # TODO Need to calculate the volume for volumes over 1000 ul\n            title \"Prepare #{reagent_name} dilutions\"\n            note temp_instructions(temperature)\n\n            note \"Dilute the #{ops_by_combo.length \u003e 1 ? reagent_name.pluralize : reagent_name} with buffer according to the table\"\n            note \"Label the tube(s) according to the table\"\n            table reagent_table\n        end\n\n        uniq_items = operations.map { |op| op.input(reagent_handle).item }.uniq\n        release(uniq_items, interactive: true)\n    end\n\n    def total_vol(vol_per_rxn, n_rxns)\n        (vol_per_rxn[:qty] * n_rxns).round\n    end\n\n    def reagent_label(op, reagent_handle, buffer_handle)\n        reagent_name = op.input(reagent_handle).try(:sample).try(:name) || \"unknown\"\n        buffer_name = op.input(buffer_handle).try(:sample).try(:name) || \"unknown\"\n        \"#{reagent_name} in #{buffer_name}\"\n    end\n\n    def add_input_from_item(op, name, item)\n        ft = FieldType.new(\n            name: name,\n            ftype: \"sample\",\n            parent_class: \"OperationType\",\n            parent_id: nil\n        )\n        ft.save\n\n        fv = FieldValue.new(\n            name: name,\n            child_item_id: item.id,\n            child_sample_id: item.sample.id,\n            role: 'input',\n            parent_class: \"Operation\",\n            parent_id: op.id,\n            field_type_id: ft.id\n        )\n        fv.save\n    end\n\n    ########## DEBUG METHODS ##########\n\n    def set_test_labels(items)\n        items.each_with_index do |item, i|\n            item.associate(:sample_tube_label, \"S#{i+1}\")\n        end\n    end\n\n    def set_test_ods(items=[])\n        items = operations.map { |op| op.input(INPUT_YEAST).item } unless items.present?\n        items.uniq.each { |item| item.associate(:od, (2.0 + 3*Random.rand) / 10) }\n    end\n\nend"}},{"library":{"name":"YeastDisplayShows","category":"Yeast Display","code_source":"\nneeds 'Standard Libs/CommonInputOutputNames'\n\nmodule YeastDisplayShows\n    \n    include CommonInputOutputNames\n\n    def prepare_media(container_group, language)\n        flask_type = language[:flask_type]\n        media_volume = language[:media_volume]\n        \n        flask_type = flask_type.pluralize if container_group.length \u003e 1\n        \n        show do\n          title \"Prepare media\"\n          warning \"Work in the media bay for media preparation.\"\n          check \"Grab #{container_group.length} #{flask_type}.\"\n          \n          out_ids = container_group.map { |op| op.output(OUTPUT_YEAST).item.id }.join(\", \")\n          check \"Label each flask or tube with the following ids: #{out_ids}\"\n          \n          note \"Add #{media_volume} of the following media into the #{flask_type}.\"\n          \n          table media_table(container_group)\n        end\n    end\n  \n    def innoculate_flasks(container_group, language)\n        passage_amount = language[:passage_amount]\n        \n        input_type = operations.first.input(INPUT_YEAST).name\n        plural_input_type = operations.length \u003e 1 ? input_type.pluralize : input_type\n        language = language.merge({ input_type: input_type })\n        \n        show do\n          title \"Inoculate #{plural_input_type}\"\n      \n          note passage_amount % language\n          table transfer_table(container_group)\n        end\n    end\n    \n    def media_table(container_group)\n        this_table = container_group.start_table\n        this_table = this_table.custom_column(heading: 'Media') { |op| op.input(\"Media\").sample.name }\n        \n        if container_group.all? { |op| media_volume(op) }\n            this_table = this_table.custom_column(heading: 'Volume (ml)') { |op| media_volume(op).round }\n        end\n        \n        this_table.output_item(OUTPUT_YEAST, checkable: true).end_table\n    end\n    \n    def get_media(container_group)\n        media = container_group.map { |op| op.input(\"Media\").sample.name }.first\n        \n        show do\n            title \"Get media\"\n            \n            check \"Get a bottle of #{media}.\"\n        end\n    end\n    \n    def transfer_table(container_group)\n        this_table = container_group.start_table.input_item(INPUT_YEAST)\n        \n        if container_group.any? { |op| sample_tube_label(op.input(INPUT_YEAST).item) }\n            this_table = this_table.custom_column(heading: 'Tube label') { |op| sample_tube_label(op.input(INPUT_YEAST).item) }\n        end\n        \n        if container_group.all? { |op| transfer_volume(op) }\n            this_table = this_table.custom_column(heading: 'Volume (ml)') { |op| transfer_volume(op).round(1) }\n        end\n        \n        this_table.output_item(OUTPUT_YEAST, checkable: true).end_table\n    end\n    \n    def measure_culture_ods(ops)\n        show do\n            title 'Measure library culture densities.'\n            \n            note 'Use the Nanodrop to measure the density of each yeast culture, and record the OD600.'\n            warning 'Record the OD600 exactly as it is shown on the screen.'\n            \n            table ops.start_table\n                .input_item(INPUT_YEAST)\n                .get(:od, type: 'number', heading: 'OD600')\n                .end_table\n        end\n    end\n  \nend"}}]}